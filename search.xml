<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>项目开发-Github工作流</title>
      <link href="/post/3150.html"/>
      <url>/post/3150.html</url>
      
        <content type="html"><![CDATA[<h1 id="GitHub工作流学习实践总结"><a href="#GitHub工作流学习实践总结" class="headerlink" title="GitHub工作流学习实践总结"></a>GitHub工作流学习实践总结</h1><p>这个工作流是跟着一超牛up主学的，比较规范。</p><p>但是为啥俺文档写出来别人看不懂啊喂！！</p><h2 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h2><blockquote><p>fork-分叉，是在github账户上完成的。</p><p>fork一个存储库，会在我们的GitHub账户上创建一个原始存储库的副本。</p><p>对分叉存储库所做的更改，可以通过一个pull请求与原始存储库合并。</p><p>fork只包含存储库的一个单独副本，不涉及命令。</p><p>这是管理代码的一个超牛手段啦！</p></blockquote><h3 id="必要性"><a href="#必要性" class="headerlink" title="必要性"></a>必要性</h3><ul><li>一些项目仓库在安全设置上会禁止直接在主仓库直接push——在参与开源项目代码贡献时，通常不会直接获得源代码仓库的Developer权限。这点和一般公司开发不太一样，公司一般都是设置在分支上是否有Push权限。</li><li>自己修改一些东西不会影响到主仓库，而且比较安全合理，很巧妙啊。</li></ul><h3 id="相关操作"><a href="#相关操作" class="headerlink" title="相关操作"></a>相关操作</h3><h4 id="fork一下"><a href="#fork一下" class="headerlink" title="fork一下"></a>fork一下</h4><p><img src="../images/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-Git%E5%B7%A5%E4%BD%9C%E6%B5%81/image-20230218103127303.png" alt="image-20230218103127303"></p><p>这样子就在自己账号下生成分仓库力！</p><p><img src="../images/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-Git%E5%B7%A5%E4%BD%9C%E6%B5%81/image-20230218103208307.png" alt="image-20230218103208307"></p><h4 id="同步一下"><a href="#同步一下" class="headerlink" title="同步一下"></a>同步一下</h4><blockquote><p>查了很多地方，百度搜出来的最不靠谱，官方文档最靠谱↓</p><p><a href="https://docs.github.com/zh/pull-requests/collaborating-with-pull-requests/working-with-forks/syncing-a-fork">https://docs.github.com/zh/pull-requests/collaborating-with-pull-requests/working-with-forks/syncing-a-fork</a></p></blockquote><h5 id="在WebUI同步分叉分支"><a href="#在WebUI同步分叉分支" class="headerlink" title="在WebUI同步分叉分支"></a>在WebUI同步分叉分支</h5><ol><li><p>在 GitHub 上，导航到您想要与上游版本库同步的复刻仓库主页。</p></li><li><p>选择“同步分支”下拉菜单。</p><p><img src="https://docs.github.com/assets/cb-18605/images/help/repository/sync-fork-dropdown.png" alt="突出显示“同步分支”下拉菜单"></p></li><li><p>查看有关上游存储库提交的详细信息，然后单击“更新分支”。<img src="../images/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-Git%E5%B7%A5%E4%BD%9C%E6%B5%81/update-branch-button.png" alt="突出显示“更新分支”按钮的同步分支模式"></p></li></ol><p>如果上游仓库的更改导致冲突，GitHub 将提示您创建拉取请求以解决冲突。</p><h5 id="从命令行同步分叉分支"><a href="#从命令行同步分叉分支" class="headerlink" title="从命令行同步分叉分支"></a>从命令行同步分叉分支</h5><ol><li><p>打开Git Bash。</p></li><li><p>将当前工作目录更改为您的本地仓库。</p></li><li><p>从上游仓库获取分支及其各自的提交。 对 <code>BRANCHNAME</code> 的提交将保存在本地分支 <code>upstream/BRANCHNAME</code> 中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git fetch upstream</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">remote: Counting objects: 75, <span class="keyword">done</span>.</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">remote: Compressing objects: 100% (53/53), <span class="keyword">done</span>.</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">remote: Total 62 (delta 27), reused 44 (delta 9)</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Unpacking objects: 100% (62/62), <span class="keyword">done</span>.</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">From https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"> * [new branch]      main     -&gt; upstream/main</span></span><br></pre></td></tr></table></figure></li><li><p>签出分支的本地默认分支，在本例中，我们使用 <code>main</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout main</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Switched to branch <span class="string">&#x27;main&#x27;</span></span></span><br></pre></td></tr></table></figure></li><li><p>将上游默认分支（在本例中为 <code>upstream/main</code>）的更改合并到本地默认分支中。 这会使复刻的默认分支与上游仓库同步，而不会丢失本地更改。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge upstream/main</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Updating a422352..5fdff0f</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Fast-forward</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"> README                    |    9 -------</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"> README.md                 |    7 ++++++</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"> 2 files changed, 7 insertions(+), 9 deletions(-)</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"> delete mode 100644 README</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"> create mode 100644 README.md</span></span><br></pre></td></tr></table></figure><p>如果本地分支没有任何唯一提交，Git 将执行快速转发。 有关详细信息，请参阅 Git 文档中的<a href="https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging">基本分支和合并</a>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge upstream/main</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Updating 34e91da..16c56ad</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Fast-forward</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"> README.md                 |    5 +++--</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"> 1 file changed, 3 insertions(+), 2 deletions(-)</span></span><br></pre></td></tr></table></figure><p>如果本地分支具有唯一提交，则可能需要解决冲突。</p></li></ol><h4 id="继续开发"><a href="#继续开发" class="headerlink" title="继续开发"></a>继续开发</h4><p>这样子就能保证项目基本开发线性啦</p><h2 id="pr基本流程"><a href="#pr基本流程" class="headerlink" title="pr基本流程"></a>pr基本流程</h2><p>在for不fork的基础上↓</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#！基本操作：</span></span><br><span class="line"><span class="variable">$</span> git clone<span class="comment">#搞下来</span></span><br><span class="line"><span class="variable">$</span> git checkout <span class="literal">-b</span> 分支名  <span class="comment">#创建分支并在该分支下工作（例:git checkout mybranch）</span></span><br><span class="line"><span class="variable">$</span> git <span class="built_in">diff</span><span class="comment">#查看自己改动了啥</span></span><br><span class="line"><span class="variable">$</span> git add <span class="literal">--all</span><span class="comment">#添加等待commit</span></span><br><span class="line"><span class="variable">$</span> git commit <span class="literal">-m</span> <span class="string">&quot;XXX&quot;</span>   <span class="comment">#放进local-git里（“附加信息”，一般就&quot;update from XXX&quot;）</span></span><br><span class="line"><span class="variable">$</span> git push origin raliz<span class="comment">#放github里</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#！有改动：</span></span><br><span class="line"><span class="variable">$</span> git checkout main<span class="comment">#先切换到主分支</span></span><br><span class="line"><span class="variable">$</span> git pull origin main<span class="comment">#把远端main同步到local_main中</span></span><br><span class="line"><span class="variable">$</span> git checkout raliz<span class="comment">#切换到自己的分支</span></span><br><span class="line"><span class="variable">$</span> git rebase main<span class="comment">#拿到main中最新的修改</span></span><br><span class="line"><span class="comment"># 手动解决rebase conflict</span></span><br><span class="line"><span class="variable">$</span> git push <span class="operator">-f</span> origin 分支名  <span class="comment">#强行push</span></span><br><span class="line"><span class="comment"># 去pull request</span></span><br><span class="line"><span class="comment"># 等管理squash and merge，把所有改变合并成一个改变</span></span><br><span class="line"><span class="comment"># 等管理delete分支</span></span><br><span class="line"><span class="comment"># 等待远端更新完毕</span></span><br><span class="line"><span class="variable">$</span> git checkout main<span class="comment">#切换到主分支</span></span><br><span class="line"><span class="variable">$</span> git branch <span class="literal">-D</span> 分支名  <span class="comment">#删除自己创建的分支</span></span><br><span class="line"><span class="variable">$</span> git pull origin main<span class="comment">#拉取船新版本</span></span><br></pre></td></tr></table></figure><p>牛牛！！</p><h2 id="commite-message"><a href="#commite-message" class="headerlink" title="commite message"></a>commite message</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">type</span>&gt;: &lt;subject&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span>(必须)——用于说明git commit的类别，只允许使用下面的标识。</span><br><span class="line">feat：新功能（feature）。</span><br><span class="line">fix/to：修复bug，可以是QA发现的BUG，也可以是研发自己发现的BUG。</span><br><span class="line">fix：产生diff并自动修复此问题。适合于一次提交直接修复问题</span><br><span class="line">to：只产生diff不自动修复此问题。适合于多次提交。最终修复问题提交时使用fix</span><br><span class="line">docs：文档（documentation）。</span><br><span class="line">style：格式（不影响代码运行的变动）。</span><br><span class="line">refactor：重构（即不是新增功能，也不是修改bug的代码变动）。</span><br><span class="line">perf：优化相关，比如提升性能、体验。</span><br><span class="line">test：增加测试。</span><br><span class="line">chore：构建过程或辅助工具的变动。</span><br><span class="line">revert：回滚到上一个版本。</span><br><span class="line">merge：代码合并。</span><br><span class="line">sync：同步主线或分支的Bug。</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">feat: 添加 button 组件</span><br><span class="line">fix: 修复 button 组件 circle 样式</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>提交pr过程中要注意这些问题，不然自己都会嫌弃自己。</p><ul><li>分支名字尽量用新增的功能或者修复了什么 bug 命名</li><li>(待更新)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> 项目托管 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP跟学笔记</title>
      <link href="/post/7743.html"/>
      <url>/post/7743.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><p>正经人谁学HTTP啊</p><h2 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h2><p><img src="../images/HTTP%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230211094221823.png" alt="image-20230211094221823"></p><h3 id="什么是HTTP？"><a href="#什么是HTTP？" class="headerlink" title="什么是HTTP？"></a>什么是HTTP？</h3><p><img src="../images/HTTP%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230211094241402.png" alt="image-20230211094241402"></p><h2 id="协议分析"><a href="#协议分析" class="headerlink" title="协议分析"></a>协议分析</h2><h3 id="变化"><a href="#变化" class="headerlink" title="变化"></a>变化</h3><p><img src="../images/HTTP%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230211094253459.png" alt="image-20230211094253459"></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>以HTTP/1.1为例：</p><p><img src="../images/HTTP%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230211094305325.png" alt="image-20230211094305325"></p><h3 id="1-Method"><a href="#1-Method" class="headerlink" title="1.Method"></a>1.Method</h3><h4 id="常见"><a href="#常见" class="headerlink" title="常见"></a>常见</h4><p><img src="../images/HTTP%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230211094316160.png" alt="image-20230211094316160"></p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li><p>Safe安全：不会修改服务器的数据的方法</p><blockquote><p>GET HEAD OPTIONS</p></blockquote></li><li><p>Indempotene幂等：同样的请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的，所有的safe的方法都是幂等的</p><blockquote><p>GET HEAD OPTIONS PUT DELETE</p></blockquote></li></ul><h3 id="2-状态码"><a href="#2-状态码" class="headerlink" title="2.状态码"></a>2.状态码</h3><h4 id="常见-1"><a href="#常见-1" class="headerlink" title="常见"></a>常见</h4><p><img src="../images/HTTP%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230211094325151.png" alt="image-20230211094325151"></p><h4 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h4><p>Representational State Transfer（REST）ful API</p><p>一种API设计风格</p><h5 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h5><ol><li>每个URI代表一种资源</li><li>客户端和服务器之间，传递这种资源的某种表现层</li><li>客户端通过HTTP method，对服务器端资源进行操作，实现“表现层状态转化”</li></ol><h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><p><img src="../images/HTTP%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230211094336678.png" alt="image-20230211094336678"></p><h3 id="3-请求头"><a href="#3-请求头" class="headerlink" title="3.请求头"></a>3.请求头</h3><h4 id="常用请求头"><a href="#常用请求头" class="headerlink" title="常用请求头"></a>常用请求头</h4><p><img src="../images/HTTP%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230211094405977.png" alt="image-20230211094405977"></p><h3 id="4-缓存"><a href="#4-缓存" class="headerlink" title="4.缓存"></a>4.缓存</h3><h4 id="强缓存-协商缓存"><a href="#强缓存-协商缓存" class="headerlink" title="强缓存/协商缓存"></a>强缓存/协商缓存</h4><p><img src="../images/HTTP%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230211094419297.png" alt="image-20230211094419297"></p><h4 id="优先级-流程"><a href="#优先级-流程" class="headerlink" title="优先级/流程"></a>优先级/流程</h4><p><img src="../images/HTTP%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230211094428650.png" alt="image-20230211094428650"></p><h3 id="5-cookie"><a href="#5-cookie" class="headerlink" title="5.cookie"></a>5.cookie</h3><h4 id="Set-Cookie-response"><a href="#Set-Cookie-response" class="headerlink" title="Set-Cookie -response"></a>Set-Cookie -response</h4><p><img src="../images/HTTP%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230211094442637.png" alt="image-20230211094442637"></p><h3 id="HTTP-2"><a href="#HTTP-2" class="headerlink" title="HTTP/2"></a>HTTP/2</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>更快更稳更简单</p><h4 id="一些名词"><a href="#一些名词" class="headerlink" title="一些名词"></a>一些名词</h4><ul><li> 帧：HTTP/2通信的最小单位，每个帧都包含帧头，至少也会标识出当前帧所属的数据流</li><li>二进制 极大提高效率</li><li>压缩算法 极大提高效率</li><li>消息：与逻辑请求或响应消息对应的完整的一系列帧。</li><li>数据流：已建立的连接内的双向字节流，可以承载一条或多条消息。</li><li>交错发送，接收方重组织</li></ul><h4 id="一些特性"><a href="#一些特性" class="headerlink" title="一些特性"></a>一些特性</h4><ul><li>HTTP/2连接都是永久的，而且仅需要每个来源一个连接</li><li>流控制：阻止发送方向接收方发送大量数据的机制</li><li>服务器推送：服务器主动推送一些信息（比如一些静态资源，但是要根据实际情况，不要盲目怼进去）</li></ul><h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><ul><li>HTTPS Hypertext Transfer Protocol Secure</li><li>经过TSL/SSL加密</li></ul><h4 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h4><ul><li> 对称加密：加密和解密都是使用同一个密钥</li><li>非对称加密，加密和解密需要使用两个不同的密钥：公钥(public key)和私钥(private key)</li><li>为了达到更高安全性——两者混用↓</li></ul><p><img src="../images/HTTP%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230211094458634.png" alt="image-20230211094458634"></p><h2 id="常见场景"><a href="#常见场景" class="headerlink" title="常见场景"></a>常见场景</h2><h3 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h3><p>好玩吧</p><p><img src="../images/HTTP%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230211094458634-1676694486063-29.png" alt="image-20230211094458634"></p><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p><img src="../images/HTTP%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230211104616306.png" alt="image-20230211104616306"></p><h4 id="OPTIONS引出"><a href="#OPTIONS引出" class="headerlink" title="OPTIONS引出"></a>OPTIONS引出</h4><ul><li>跨域问题-cross-origin</li><li>需要same-origin</li></ul><p>https:       //<a href="http://www.example.com/">www.example.com</a>     :443<br>scheme     host name                    port</p><h4 id="如何解决跨域问题？"><a href="#如何解决跨域问题？" class="headerlink" title="如何解决跨域问题？"></a>如何解决跨域问题？</h4><ol><li><p>CORS    Cross-Origin Resource Sharing</p><ul><li><p>预请求：获知服务端是否允许该跨源请求（复杂请求）</p></li><li><p>相关协议头<br>Access-Control-Allow-Origin<br>Access-Control-Expose-Headers<br>Access-Control-Max-Age<br>Access-Control-Allow-Credentials<br>Access-Control-Allow-Methods<br>Access-Control-Allow-Headers<br>Access-Control-Request-Method<br>Access-Control-Request-Headers<br>Origin</p></li></ul></li><li><p>代理服务器</p><ul><li><p>同源策略是浏览器的安全策略，不是HTTP的</p><p><img src="../images/HTTP%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230211105054923.png" alt="image-20230211105054923"></p></li></ul></li><li><p>Iframe</p><ul><li>诸多不便</li></ul></li></ol><h4 id="携带信息"><a href="#携带信息" class="headerlink" title="携带信息"></a>携带信息</h4><ol><li>向什么地址做了什么动作？（栗子）<ul><li>使用POST方法</li><li>目标域名https:/sso.toutiao.com</li><li>目标path/quick_login,/v2/</li></ul></li><li>携带了哪些信息，返回了哪些信息？<ul><li>携带信息<pre><code>Post body,数据格式为form希望获取的数据格式为json已有的cookie</code></pre></li><li>返回信息<pre><code>数据格式json种cookie的信息</code></pre></li></ul></li></ol><h4 id="鉴权"><a href="#鉴权" class="headerlink" title="鉴权"></a>鉴权</h4><p><img src="../images/HTTP%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230211105550005.png" alt="image-20230211105550005"></p><h4 id="SSO单点登录"><a href="#SSO单点登录" class="headerlink" title="SSO单点登录"></a>SSO单点登录</h4><p>单点登录（Single Sign-On，缩写为 SSO）是一种用户认证方式，使用一个凭证（如用户名和密码）即可登录多个相关系统。这样，用户只需要登录一次就可以在多个系统中访问所需的资源，而不需要在每个系统上进行独立登录。</p><p>单点登录通常用于组织内部的系统，如企业内部的人力资源系统、财务系统等。它的好处在于简化了用户登录过程，提高了用户体验，并且提高了安全性。</p><h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><h3 id="XHR"><a href="#XHR" class="headerlink" title="XHR"></a>XHR</h3><p><img src="../images/HTTP%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230211153030107.png" alt="image-20230211153030107"></p><h3 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a>Fetch</h3><p><img src="../images/HTTP%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230211153051629.png" alt="image-20230211153051629"></p><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><h4 id="HTTP-HTTPS"><a href="#HTTP-HTTPS" class="headerlink" title="HTTP/HTTPS"></a>HTTP/HTTPS</h4><ul><li>默认模块，无需安装其他依赖</li><li>功能有限/不是十分友好</li></ul><h4 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h4><ul><li>支持浏览器、nodejs环境</li><li>丰富的拦截器</li></ul><h3 id="网络优化"><a href="#网络优化" class="headerlink" title="网络优化"></a>网络优化</h3><h4 id="快"><a href="#快" class="headerlink" title="快"></a>快</h4><p><img src="../images/HTTP%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230211153308004.png" alt="image-20230211153308004"></p><h4 id="稳"><a href="#稳" class="headerlink" title="稳"></a>稳</h4><p><img src="../images/HTTP%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230211153414258.png" alt="image-20230211153414258"></p><ul><li>重试是保证稳定的有效手段，但是要防止加剧恶劣情况</li><li>缓存合理使用，作为最后的一道防线</li></ul><h2 id="了解更多"><a href="#了解更多" class="headerlink" title="了解更多"></a>了解更多</h2><h3 id="通信方式"><a href="#通信方式" class="headerlink" title="通信方式"></a>通信方式</h3><h4 id="WEbSocket"><a href="#WEbSocket" class="headerlink" title="WEbSocket"></a>WEbSocket</h4><ul><li>浏览器与服务器进行全双工通讯的网络技术</li><li>典型场景：实时性要求高，例如聊天室</li><li>URL使用ws://或wSs:/等开头</li></ul><h3 id="传输层UDP"><a href="#传输层UDP" class="headerlink" title="传输层UDP"></a>传输层UDP</h3><h4 id="QUIC（目前不适合大规模应用）"><a href="#QUIC（目前不适合大规模应用）" class="headerlink" title="QUIC（目前不适合大规模应用）"></a>QUIC（目前不适合大规模应用）</h4><ul><li>QUIC:Quick UDP Internet Connection</li><li>O-RTT建联（首次建联除外）。</li><li>类似TCP的可靠传输。</li><li>类似TLS的加密传输，支持完美前向安全。</li><li>用户空间的拥塞控制，最新的BBR算法。</li><li>支持h2的基于流的多路复用，但没有TCP的HOL问题。</li><li>前向纠错FEC。</li><li>类似MPTCP的Connection migration。</li></ul><p><img src="../images/HTTP%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230211153755036.png" alt="image-20230211153755036"></p>]]></content>
      
      
      <categories>
          
          <category> 青训笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 青训营 </tag>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TS跟学笔记</title>
      <link href="/post/bd24.html"/>
      <url>/post/bd24.html</url>
      
        <content type="html"><![CDATA[<h1 id="TS"><a href="#TS" class="headerlink" title="TS"></a>TS</h1><p>正经人谁学TS啊</p><h2 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h2><blockquote><ul><li>2012-10:微软发布了TypeScript第-个版本(0.8)</li><li>2014-10:Angular2发布了基于TypeScript的2.0版本</li><li>2015-04:微软发布了Visual Studio Code</li><li>2016-05:@types/react?发布，TypeScript可开发React</li><li>2020-09:ue发布了3.0版本，官方支持TypeScript</li><li>2021-11:v4.5版本发布</li></ul></blockquote><h2 id="为什么TS"><a href="#为什么TS" class="headerlink" title="为什么TS"></a>为什么TS</h2><h3 id="和JS的比较"><a href="#和JS的比较" class="headerlink" title="和JS的比较"></a>和JS的比较</h3><table><thead><tr><th>JS</th><th>TS</th></tr></thead><tbody><tr><td>动态类型</td><td>静态类型</td></tr><tr><td>弱类型语言</td><td>弱类型语言</td></tr></tbody></table><h4 id="动态类型"><a href="#动态类型" class="headerlink" title="动态类型"></a>动态类型</h4><p>在执行阶段才确定类型的匹配。编译在执行时</p><h4 id="静态类型"><a href="#静态类型" class="headerlink" title="静态类型"></a>静态类型</h4><p>提前确定类型匹配。编译在执行前</p><h4 id="弱类型语言"><a href="#弱类型语言" class="headerlink" title="弱类型语言"></a>弱类型语言</h4><p>数据类型可以被忽略的语言=&gt;一个变量可以赋不同的数据类型的值。</p><h4 id="强类型语言"><a href="#强类型语言" class="headerlink" title="强类型语言"></a>强类型语言</h4><p>强制数据类型定义的语言=&gt;一个变量被指定了某个数据类型，如果不经过强制转换，永远是这个类型=&gt;一个类型的变量不会被当成另一种类型处理，（强类型定义语言是类型安全的语言）</p><h4 id="TS优势"><a href="#TS优势" class="headerlink" title="TS优势"></a>TS优势</h4><h5 id="静态类型-1"><a href="#静态类型-1" class="headerlink" title="静态类型"></a>静态类型</h5><ul><li>可读性增强：基于语法解析TSDoc，ide增强</li><li>可维护性增强：在编译阶段暴露大部分错误=&gt;多人合作的大型项目中获得更好的稳定性和开发效率</li></ul><h5 id="JS的超集"><a href="#JS的超集" class="headerlink" title="JS的超集"></a>JS的超集</h5><ul><li>包含于兼容所有的JS特性，支持共存</li><li>支持渐进式引入的升级</li></ul><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h3><p>JS</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> q = <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> w = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> e = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> r = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">const</span> t = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><p>TS</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">q</span>: <span class="built_in">string</span> = <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">w</span>: <span class="built_in">number</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">e</span>: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">r</span>: <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line">ocnst <span class="attr">t</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><h3 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h3><p>TS</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">bytedancer</span>: <span class="title class_">IBytedancer</span> = &#123;</span><br><span class="line">    <span class="attr">jobId</span>: <span class="number">9303245</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Lin&#x27;</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;man&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">28</span>,</span><br><span class="line">    <span class="attr">hobby</span>: swimming<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/*自定义对象类型：I开头表示是个类型，与普通对象/类的作区分*/</span></span><br><span class="line"><span class="string">interface IBytedancer &#123;</span></span><br><span class="line"><span class="string">    /*只读属性：约束属性不可在对象初始化外赋值*/</span></span><br><span class="line"><span class="string">    readonly jobId: number;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    name: string;</span></span><br><span class="line"><span class="string">    sex: &#x27;</span>man<span class="string">&#x27;|&#x27;</span>woman<span class="string">&#x27;|&#x27;</span>other<span class="string">&#x27;;</span></span><br><span class="line"><span class="string">    age: number;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    /*可选属性：定义该属性可以不存在*/</span></span><br><span class="line"><span class="string">    hobby?: string;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    /*任意属性：约束所有对象属性都必须是该属性的子类型*/</span></span><br><span class="line"><span class="string">    [key: string]: any;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/*报错：无法分配到&quot;jobId”,因为它是只读属性*/</span></span><br><span class="line"><span class="string">bytedancer.jobId = 12345;</span></span><br><span class="line"><span class="string">/*成功：任意属性标注下可以添加任意属性*/</span></span><br><span class="line"><span class="string">bytedancer.plateform = &#x27;</span>data<span class="string">&#x27;;</span></span><br><span class="line"><span class="string">/*报错：缺少属性&quot;name&quot;,hobby可缺省*/</span></span><br><span class="line"><span class="string">const bytedancer2: IBytedancer = &#123;</span></span><br><span class="line"><span class="string">    jobId: 89757,</span></span><br><span class="line"><span class="string">    sex: &#x27;</span>woman<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">    age: 18,</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><p>JS</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mult</span> = (<span class="params">x, y</span>) =&gt; x * y;</span><br></pre></td></tr></table></figure><p>TS</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">mult</span>: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function">(<span class="params">x, y</span>) =&gt;</span> x * y;</span><br><span class="line">↓更加清晰</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IMult</span> &#123;</span><br><span class="line">    (<span class="attr">x</span>: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">mult</span>: <span class="title class_">IMult</span> = <span class="function">(<span class="params">x, y</span>) =&gt;</span> x * y;</span><br></pre></td></tr></table></figure><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*对getDate函数进行重载，timestamp为可缺省参数*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getDate</span>(<span class="params"><span class="keyword">type</span>:<span class="string">&#x27;string&#x27;</span>,timestamp?:<span class="built_in">string</span></span>):<span class="built_in">string</span>;</span><br><span class="line">↓</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IGetDate</span> &#123;</span><br><span class="line">    (<span class="attr">type</span>:<span class="string">&#x27;string&#x27;</span>,timestamp?:<span class="built_in">string</span>):<span class="built_in">string</span>;</span><br><span class="line">    (<span class="attr">type</span>:<span class="string">&#x27;date&#x27;</span>,timestamp?:<span class="built_in">string</span>):<span class="title class_">Date</span>;</span><br><span class="line">    (<span class="attr">type</span>:<span class="string">&#x27;string&#x27;</span>|<span class="string">&#x27;date&#x27;</span>,timestamp?:<span class="built_in">string</span>):<span class="title class_">Date</span> <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 报错，因为没有给参数声明类型 */</span></span><br><span class="line"><span class="comment">/*不能将类型“(type:any,timestamp:any)=&gt;string|Date&quot;分配给类型“IGetDate”。</span></span><br><span class="line"><span class="comment">不能将类型“string|Date&quot;分配给类型“string”。</span></span><br><span class="line"><span class="comment">不能将类型“Date”分配给类型“string”。ts(322) */</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">getDate2</span>:<span class="title class_">IGetDate</span> = <span class="function">(<span class="params"><span class="keyword">type</span>, timestamp</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(timestamp);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">type</span> ===<span class="string">&#x27;string&#x27;</span> ? date.<span class="title function_">toLocalestring</span>():date;</span><br><span class="line">&#125;</span><br><span class="line">也就是说，函数里面的函数的类型范围要小于函数本身所在的类型范围。</span><br></pre></td></tr></table></figure><h3 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*「类型+方括号」表示-常用*/</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IArr1</span> = <span class="built_in">number</span>[];</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IArr</span> = <span class="built_in">string</span>[];</span><br><span class="line"><span class="comment">/*泛型表示-常用,第三个是对象的简写形式*/</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IArr2</span> = <span class="title class_">Array</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span> | <span class="title class_">Record</span>&lt;<span class="built_in">string</span>,<span class="built_in">number</span>&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*元祖表示*/</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IArr3</span> = [<span class="built_in">number</span>, <span class="built_in">number</span>, <span class="built_in">string</span>, <span class="built_in">string</span>];</span><br><span class="line"><span class="comment">/*接口表示*/</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IArr4</span> &#123;</span><br><span class="line">    [<span class="attr">key</span>: <span class="built_in">number</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">arr1</span>: <span class="title class_">IArr1</span>=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="attr">arr2</span>: <span class="title class_">IArr2</span>=[<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;];</span><br><span class="line"><span class="keyword">const</span> <span class="attr">arr3</span>: <span class="title class_">IArr3</span>=[<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="attr">arr4</span>: <span class="title class_">IArr4</span> [<span class="string">&#x27;string&#x27;</span>,<span class="function">() =&gt;</span> <span class="literal">null</span>, &#123;&#125;, []];</span><br></pre></td></tr></table></figure><h3 id="TS补充类型"><a href="#TS补充类型" class="headerlink" title="TS补充类型"></a>TS补充类型</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*空类型，表示无赋值*/</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IEmptyFunction</span> = <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"><span class="comment">/*任意类型，是所有类型的子类型*/</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IAnyType</span> = <span class="built_in">any</span>;</span><br><span class="line"><span class="comment">/*枚举类型：支持枚举值到枚举名的正、反向映射*/</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">EnumExample</span> &#123;</span><br><span class="line">    add = <span class="string">&#x27;+&#x27;</span>,</span><br><span class="line">mult = <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">EnumExample</span>[<span class="string">&#x27;add&#x27;</span>] === <span class="string">&#x27;+&#x27;</span>;</span><br><span class="line"><span class="title class_">EnumExample</span>[<span class="string">&#x27;*&#x27;</span>] === <span class="string">&#x27;mult&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">ECorlor</span> &#123; <span class="title class_">Mon</span>, <span class="title class_">Tue</span>, <span class="title class_">Wed</span>, <span class="title class_">Thu</span>, <span class="title class_">Fri</span>, <span class="title class_">Sat</span>, <span class="title class_">Sun</span> &#125;;</span><br><span class="line"><span class="title class_">ECorlor</span>[<span class="string">&#x27;Mon&#x27;</span>] === <span class="number">0</span>;</span><br><span class="line"><span class="title class_">ECorlor</span>[<span class="number">0</span>] === <span class="string">&#x27;Mon&#x27;</span>;</span><br><span class="line"><span class="comment">/* 泛型 */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">INumArr</span> = <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt;;</span><br></pre></td></tr></table></figure><h3 id="TS泛型"><a href="#TS泛型" class="headerlink" title="TS泛型"></a>TS泛型</h3><p>特征：不预先指定类型的时候，也就是在使用某类型时，才确定该类型。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getRepeatArr</span>(<span class="params">target</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">100</span>).<span class="title function_">fill</span>(target);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IGetRepeatArr</span> = <span class="function">(<span class="params">target: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">any</span>[];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不预先指定具体的类型，而在使用的时候再指定类型的一种特性 */</span></span><br><span class="line"><span class="comment">/* 函数中泛型：&lt;T&gt;函数定义 */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IGetRepeatArrR</span> = &lt;T&gt;<span class="function">(<span class="params">target: T</span>) =&gt;</span> T[];</span><br></pre></td></tr></table></figure><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 类，泛型接口，Object中：类型名&lt;T&gt; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 泛型接口 &amp; 多泛型 */</span></span><br><span class="line"><span class="keyword">interface</span> IX&lt;T,U&gt; &#123;</span><br><span class="line">    <span class="attr">key</span>: T;</span><br><span class="line">    <span class="attr">val</span>: U;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 泛型类 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IMan</span>&lt;T&gt; &#123;</span><br><span class="line"><span class="attr">instance</span>: T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 泛型别名 */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ITypeArr</span>&lt;T&gt; = <span class="title class_">Array</span>&lt;T&gt;;</span><br></pre></td></tr></table></figure><h4 id="有点高级的语法"><a href="#有点高级的语法" class="headerlink" title="有点高级的语法"></a>有点高级的语法</h4><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">函数的泛型</span><br><span class="line"><span class="comment">/* 泛型约束：限制泛型必须符合字符串 */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IGetRepeatStringArr</span> = &lt;T <span class="keyword">extends</span> <span class="built_in">string</span>&gt;<span class="function">(<span class="params">target: T</span>) =&gt;</span> T[]; </span><br><span class="line"><span class="keyword">const</span> <span class="attr">getstrArr</span>: <span class="title class_">IGetRepeatStringArr</span> = <span class="function"><span class="params">target</span> =&gt;</span> <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">100</span>).<span class="title function_">fill</span>(target);</span><br><span class="line"><span class="comment">/*报错：类型“number&quot;的参数不能赋给类型“string”的参数*/</span></span><br><span class="line"><span class="title function_">getstrArr</span>(<span class="number">123</span>);</span><br></pre></td></tr></table></figure><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">类型别名的泛型</span><br><span class="line"><span class="comment">/*泛型参数默认类型*/</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IGetRepeatArr</span>&lt;T = <span class="built_in">number</span>&gt;<span class="function">(<span class="params">target: T</span>) =&gt;</span> T[];</span><br><span class="line"><span class="keyword">const</span> <span class="attr">getRepeatArr</span>: <span class="title class_">IGetRepeatArr</span> target = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">100</span>).<span class="title function_">fill</span>(target);</span><br><span class="line"><span class="comment">/*报错：类型“string”的参数不能赋给类型“number&quot;的参数*/</span></span><br><span class="line"><span class="title function_">getRepeatArr</span>(<span class="string">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="类型别名-amp-类型断言"><a href="#类型别名-amp-类型断言" class="headerlink" title="类型别名&amp;类型断言"></a>类型别名&amp;类型断言</h3><p>这段代码是使用TypeScript定义了一个函数”keyBy”，它用于将一个对象数组转换为一个键值对字典。</p><p>第1行：通过”type”关键字定义了一个别名类型”IObjArr”，它代表了一个对象数组，每个元素都是一个包含key属性与任意其他属性的对象。</p><p>第3行：声明了一个名为”keyBy”的函数，它参数为”objArr”，它类型为Array<T>，T继承自IObjArr，意味着objArr的元素必须是包含key属性的对象。</p><p>第5行：定义了一个名为result的变量，初始值是将objArr使用reduce方法转换为的对象，reduce方法会接收一个回调函数，对数组进行遍历，不断累积最终的结果。</p><p>第9行：使用”as”关键字断言result的类型为Record&lt;string,T&gt;，意味着result是一个以字符串为键，T类型为值的字典。</p><p>最后，返回result。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*通过type关键字定义了I0 bjArrl的别名类型*/</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IObjArr</span> = <span class="title class_">Array</span>&lt;&#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="built_in">string</span>;</span><br><span class="line">    [<span class="attr">objKey</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;&gt;</span><br><span class="line"><span class="keyword">function</span> keyBy&lt;T <span class="keyword">extends</span> <span class="title class_">IObjArr</span>&gt;(<span class="attr">objArr</span>: <span class="title class_">Array</span>&lt;T&gt;)&#123;</span><br><span class="line"><span class="comment">/*未指定类型时，result类型为&#123;&#125;*/</span></span><br><span class="line">    <span class="keyword">const</span> result = objArr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">res, val, key</span>) =&gt;</span> &#123;</span><br><span class="line">    res[key] = val;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;,&#123;&#125;);</span><br><span class="line"><span class="comment">/*通过as关键字，断言result类型为正确类型*/</span></span><br><span class="line"><span class="keyword">return</span> result <span class="keyword">as</span> <span class="title class_">Record</span>&lt;<span class="built_in">string</span>,T&gt;;</span><br></pre></td></tr></table></figure><h3 id="字符串-数字-字面量"><a href="#字符串-数字-字面量" class="headerlink" title="字符串/数字 字面量"></a>字符串/数字 字面量</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*允许指定字符串/数字必须的固定值*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*IDomTag必须为html、body、div、span中的其一*/</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IDomTag</span> = <span class="string">&#x27;html&#x27;</span> | <span class="string">&#x27;body&#x27;</span> | <span class="string">&#x27;div&#x27;</span> | <span class="string">&#x27;span&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*I0 ddNumber必须为1、3、5、7、9中的其一*/</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IOddNumber</span> = <span class="number">1</span> |<span class="number">3</span> | <span class="number">5</span> | <span class="number">7</span> | <span class="number">9</span>;</span><br></pre></td></tr></table></figure><h2 id="高级类型"><a href="#高级类型" class="headerlink" title="高级类型"></a>高级类型</h2><h3 id="来自chatGPT"><a href="#来自chatGPT" class="headerlink" title="来自chatGPT"></a>来自chatGPT</h3><p>一些常用类型：</p><ol><li>可读属性</li><li>可选属性</li><li>索引签名</li><li>字面量类型</li></ol><p>常用的 TypeScript 高级类型有：</p><ol><li><p>交叉类型 (Intersection Types)</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Role</span> &#123;</span><br><span class="line">  <span class="attr">role</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UserWithRole</span> = <span class="title class_">User</span> &amp; <span class="title class_">Role</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">userWithRole</span>: <span class="title class_">UserWithRole</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span>,</span><br><span class="line">  <span class="attr">role</span>: <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>联合类型 (Union Types)</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">UserID</span> = <span class="built_in">number</span> | <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">userID</span>: <span class="title class_">UserID</span> = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">anotherUserID</span>: <span class="title class_">UserID</span> = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误，因为true不是number或string</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">wrongUserID</span>: <span class="title class_">UserID</span> = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></li><li><p>类型别名 (Type Aliases)</p></li><li><p>映射类型 (Mapped Types)</p></li><li><p>条件类型 (Conditional Types)</p></li><li><p>可辨识联合类型 (Discriminated Unions)</p></li><li><p>类型推断 (Type Inference)</p></li><li><p>类型保护 (Type Guards)</p></li><li><p>索引类型 (Index Types)</p></li><li><p>联合类型推断 (Union Type Inference)</p></li></ol><h3 id="1-联合-交叉类型"><a href="#1-联合-交叉类型" class="headerlink" title="1.联合/交叉类型"></a>1.联合/交叉类型</h3><h4 id="为书籍列表编写类型"><a href="#为书籍列表编写类型" class="headerlink" title="为书籍列表编写类型"></a>为书籍列表编写类型</h4><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bookList = [&#123;</span><br><span class="line">    <span class="attr">author</span>: <span class="string">&#x27;xioaming&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">    <span class="attr">range</span>: <span class="string">&#x27;2001-2021&#x27;</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">    <span class="attr">author</span>: <span class="string">&#x27;xiaoli&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;story&#x27;</span>,</span><br><span class="line">    <span class="attr">theme</span>: <span class="string">&#x27;love&#x27;</span>,</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>↓类型声明繁琐，存在较多重复</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IHistoryBook</span> &#123;</span><br><span class="line">    <span class="attr">author</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">range</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IStoryBook</span> &#123;</span><br><span class="line">    <span class="attr">author</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">theme</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IBookList</span> = <span class="title class_">Array</span>&lt;<span class="title class_">IHistoryBook</span> | <span class="title class_">IStoryBook</span>&gt;;</span><br></pre></td></tr></table></figure><h4 id="改进后"><a href="#改进后" class="headerlink" title="改进后"></a>改进后</h4><ul><li>联合类型：IA | IB    联合类型表示一个值可以是几种类型之一</li><li>交叉类型：IA &amp; IB   多种类型叠加到一起形成的一种类型，包含了所有所需的所有类型特性 </li></ul><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IBookList</span> = <span class="title class_">Array</span>&lt;&#123;</span><br><span class="line">    <span class="attr">author</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125; &amp; (&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;history&#x27;</span>;</span><br><span class="line">    <span class="attr">range</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125; | &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;story&#x27;</span>;</span><br><span class="line">    <span class="attr">theme</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;)&gt;</span><br></pre></td></tr></table></figure><h3 id="2-类型保护-amp-类型守卫"><a href="#2-类型保护-amp-类型守卫" class="headerlink" title="2.类型保护&amp;类型守卫"></a>2.类型保护&amp;类型守卫</h3><h4 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h4><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IA &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">a2</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">interface</span> IB &#123;<span class="attr">b</span>: <span class="number">1</span>, <span class="attr">b1</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">log</span>(<span class="params">args: IA | IB</span>) &#123;</span><br><span class="line"><span class="comment">/*报错：类型“IA|IB”上不存在属性“a”。类型“IB”上不存在属性“a”。*/</span></span><br><span class="line"><span class="comment">/*结论：访问联合类型时，处于程序安全，仅能访问联合类型中的交集部分*/</span></span><br><span class="line">    <span class="keyword">if</span>(arg.<span class="property">a</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">a1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">b1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="改造"><a href="#改造" class="headerlink" title="改造"></a>改造</h4><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IA a:1,al:2</span><br><span class="line"><span class="keyword">interface</span> IB b:1,b1:2</span><br><span class="line"></span><br><span class="line">/*类型守卫：定义一个函数，它的返回值是一个类型谓词，生效范围为子作用域*/</span><br><span class="line">function getIsIA(arg: IA | IB): arg is IA &#123;</span><br><span class="line">    <span class="comment">/*as-断言,当存在a时，断言为IA类型*/</span></span><br><span class="line">    <span class="keyword">return</span> !!(arg <span class="keyword">as</span> <span class="variable constant_">IA</span>).<span class="property">a</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">log2</span>(<span class="params">arg: IA | IB</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">getIsIA</span>(arg))&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">a1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">b1</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现函数logBook类型"><a href="#实现函数logBook类型" class="headerlink" title="实现函数logBook类型"></a>实现函数logBook类型</h4><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数接受书本类型，并logger出相关特征</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">logBook</span>(<span class="params">book: IBookItem</span>) &#123;</span><br><span class="line">    <span class="comment">// 联合类型 + 类型保护 = 自动类型判断</span></span><br><span class="line">    <span class="keyword">if</span>(book.<span class="property">type</span> === <span class="string">&#x27;history&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(book.<span class="property">range</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(book.<span class="property">theme</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-merge函数类型"><a href="#3-merge函数类型" class="headerlink" title="3.merge函数类型"></a>3.merge函数类型</h3><h4 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*实现merge函数类型</span></span><br><span class="line"><span class="comment">*要求sourceObj必须为targetObj的子集</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">merge1</span>(<span class="params">sourceObj, targetObj</span>)&#123;</span><br><span class="line"><span class="keyword">const</span> result &#123;...sourceobj &#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> targetobj) &#123;</span><br><span class="line">        <span class="keyword">const</span> itemVal = sourceobj[key];</span><br><span class="line">        itemVal &amp;&amp; (result[key] = itemVal);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">merge2</span>(<span class="params">sourceObj, targetObj</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;...sourceobj,...targetobj &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="TS-1"><a href="#TS-1" class="headerlink" title="TS"></a>TS</h4><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ISourceobj</span> &#123;</span><br><span class="line">    x?: <span class="built_in">string</span>;</span><br><span class="line">y?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*定义时不明确，使用时才明确*/</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ITargetobj</span> &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">y</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IMerge</span> = <span class="function">(<span class="params">sourceobj: ISourceobj, targetobj: ITargetobj</span>) =&gt;</span> <span class="title class_">ITargetobj</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*类型实现繁琐：若obj类型较为复杂，则声明source和target便需要大量重复2遍</span></span><br><span class="line"><span class="comment">*容易出错：若target增加/减少key,则需要source联动去除</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h4><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IMerge</span> &#123;</span><br><span class="line">    &lt;T <span class="keyword">extends</span> <span class="title class_">Record</span>&lt;<span class="built_in">string</span>,<span class="built_in">any</span>&gt;&gt;(<span class="attr">sourceObj</span>: <span class="title class_">Partial</span>&lt;T&gt;, <span class="attr">targetObj</span>: T): T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IPartial</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">any</span>&gt;&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IKeys</span> = keyof &#123; <span class="attr">a</span>: <span class="built_in">string</span>; <span class="attr">b</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line">        </span><br><span class="line"><span class="comment">/* 索引类型：</span></span><br><span class="line"><span class="comment">关键字【keyof】,其相当于取值对像中的所有key组成的字符串字面量，如=&gt;type IKeys &quot;a&quot;|&quot;b&quot;</span></span><br><span class="line"><span class="comment">关键字【in】,其相当于取值字符串字面量中的一种可能，配合泛型P,即表示每个key</span></span><br><span class="line"><span class="comment">关键字【?】，通过设定对象可选选项，即可自动推导出子集类型 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="解释说明"><a href="#解释说明" class="headerlink" title="解释说明"></a>解释说明</h5><blockquote><p>这段代码是一个定义了多个TypeScript类型的代码。</p><ol><li><p>IMerge是一个接口，它定义了一个方法，该方法接受两个对象，并返回一个新的对象，其中第一个对象是Partial<T>类型，第二个对象是T类型，T是Record类型的泛型。</p></li><li><p>IPartial是一个类型别名，它定义了T类型的可选部分，T是Record类型的泛型。</p></li><li><p>IKeys是一个类型别名，它定义了一个名为’a’和’b’的对象的键的类型，其中’a’的类型是字符串，’b’的类型是数字。</p></li><li><p>关系：</p><ul><li><p><code>IMerge</code> 是一个接口，它定义了一个合并两个对象的方法，并将合并后的对象返回。它接受两个对象作为参数，分别是源对象和目标对象，返回值为目标对象。</p></li><li><p><code>IPartial</code> 是一个类型别名，它定义了一个可选字段的对象。也就是说，可以有一些字段是不是必填的。</p></li><li><p><code>IKeys</code> 是一个类型别名，它定义了一个字符串字面量类型的联合类型。它的值是 ‘a’ 和 ‘b’。</p></li></ul></li></ol></blockquote><h3 id="4-函数返回值类型"><a href="#4-函数返回值类型" class="headerlink" title="4.函数返回值类型"></a>4.函数返回值类型</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现函数delayCall的类型声明</span></span><br><span class="line"><span class="comment">// delayCall接受一个函数作为入参，其实现延迟1s运行函数</span></span><br><span class="line"><span class="comment">// 其返回promise,结果为入参函数的返回结果</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">delayCall</span>(<span class="params">func</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> result = <span class="title function_">func</span>();</span><br><span class="line">            <span class="title function_">resolve</span>(result)</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>↓怎么写个类型声明嘞？</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个类型别名, extends泛型限定为函数</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IDelayCall</span> = &lt; T <span class="keyword">extends</span> () =&gt; <span class="built_in">any</span> &gt;<span class="function">(<span class="params">func: T</span>) =&gt;</span> <span class="title class_">ReturnType</span>&lt;T&gt;;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IReturnType</span>&lt; T <span class="keyword">extends</span> (...<span class="attr">args</span>: <span class="built_in">any</span>) =&gt; <span class="built_in">any</span> &gt; = T <span class="keyword">extends</span> (...<span class="attr">args</span>: <span class="built_in">any</span>) =&gt; infer R ? R : <span class="built_in">any</span>;                          <span class="comment">/*类型推断*/</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 关键字【extends】跟随泛型出现时，表示类型推断，其表达可类比三元表达式</span></span><br><span class="line"><span class="comment">// 如 T === 判断类型？类型A:类型B</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 关键字【infer】)出现在类型推荐中，表示定义类型变量，可以用于指代类型</span></span><br><span class="line"><span class="comment">// 如该场景下，将函数的返回值类型作为变量，使用新泛型R表示，使用在类型推荐命中的结果中    </span></span><br></pre></td></tr></table></figure><h4 id="解释说明-1"><a href="#解释说明-1" class="headerlink" title="解释说明"></a>解释说明</h4><blockquote><p>这段 TypeScript 代码定义了两种类型：<code>IDelayCall</code> 和 <code>IReturnType</code>.</p><ul><li><p><code>IDelayCall</code>是一个泛型函数，接受一个类型为 <code>(...args: any) =&gt; any</code> 的参数<code>func</code>，返回值为 <code>func</code> 的返回类型（使用了 TypeScript 的 <code>ReturnType</code> 内置类型）。</p></li><li><p><code>IReturnType</code> 也是一个泛型函数，它接受一个类型为 <code>(...args: any) =&gt; any</code> 的参数，并使用 TypeScript 的 <code>infer</code>关键字来推断该函数的返回类型，如果返回类型不能被推断出来，则默认为<code>any</code>类型。</p></li></ul><p>这两个类型定义之间是有关系的。</p><ul><li><p><code>IDelayCall</code> 类型定义了一个函数，接受一个函数 <code>func</code> 作为参数，并返回该函数的返回类型。</p></li><li><p>而 <code>IReturnType</code> 类型定义了一个模板类型，它接受一个函数类型为参数 <code>T</code>，并通过 TypeScript 的推导功能将该函数的返回类型推导为 <code>R</code>，最后返回结果为 <code>R</code> 或者 <code>any</code>，具体取决于 <code>T</code> 类型是否满足上述函数类型。</p></li></ul><p>因此，我们可以将 <code>IReturnType</code> 定义为 <code>IDelayCall</code> 函数的<strong>内部类型</strong>，以便进行更简洁、清晰的代码编写。</p></blockquote><h2 id="工程运用"><a href="#工程运用" class="headerlink" title="工程运用"></a>工程运用</h2><h3 id="浏览器Web"><a href="#浏览器Web" class="headerlink" title="浏览器Web"></a>浏览器Web</h3><h4 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h4><ol><li>配置<strong>webpack loader</strong>相关配置（处理ts文件，转化成js文件）</li><li>配置tsconfig.js文件</li><li>运行webpack启动/打包</li><li>loader处理ts文件时，会进行编译与类型检查</li></ol><p>相关loader：</p><ol><li>awesome-typescript-loader</li><li>babel-loader</li></ol><h3 id="NodeJs"><a href="#NodeJs" class="headerlink" title="NodeJs"></a>NodeJs</h3><p>使用TSC编译</p><ol><li>安装node npm</li><li>使用npm安装tsc</li><li>配置tsocnfig.js文件</li><li>使用tsc运行编译得到的js文件</li></ol>]]></content>
      
      
      <categories>
          
          <category> 青训笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 青训营 </tag>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS跟学笔记</title>
      <link href="/post/a33a.html"/>
      <url>/post/a33a.html</url>
      
        <content type="html"><![CDATA[<h1 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h1><p>正经人谁学</p><h2 id="一、本堂课重点内容："><a href="#一、本堂课重点内容：" class="headerlink" title="一、本堂课重点内容："></a><strong>一、本堂课重点内容：</strong></h2><p>（如何写好JS↓）</p><p>JS编码原则</p><ul><li>各司其责</li><li>组件封装（课程内容属实强，要花很长时间消化）</li><li>过程抽象</li></ul><p>Left-pad事故背景引入</p><p>JS代码质量优化</p><h2 id="二、详细知识点介绍："><a href="#二、详细知识点介绍：" class="headerlink" title="二、详细知识点介绍："></a><strong>二、详细知识点介绍：</strong></h2><h3 id="JS编码原则-各司其职"><a href="#JS编码原则-各司其职" class="headerlink" title="JS编码原则-各司其职"></a>JS编码原则-各司其职</h3><blockquote><p>让HTML、CSS、JS职能分离</p></blockquote><h4 id="举例-深夜食堂的明暗模式mode"><a href="#举例-深夜食堂的明暗模式mode" class="headerlink" title="举例-深夜食堂的明暗模式mode"></a>举例-深夜食堂的明暗模式mode</h4><p>HTML代码</p><p><img src="../images/JS%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/carbon.png" alt="carbon"></p><p>CSS代码</p><p><img src="../images/JS%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/carbon%20(1).png" alt="carbon (1)"></p><p><a href="https://code.juejin.cn/pen/7189551881298346039">码上掘金链接</a></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>三者各司其责</li><li>避免不必要的由JS直接操作样式</li><li>可以用class来表示状态</li><li>纯展示交互寻求零JS方案</li></ul><h3 id="JS编码原则-组件封装"><a href="#JS编码原则-组件封装" class="headerlink" title="JS编码原则-组件封装"></a>JS编码原则-组件封装</h3><blockquote><p>好的UI组件具备正确性、扩展性、复用性</p></blockquote><h4 id="举例-原生JS电商网站轮播图"><a href="#举例-原生JS电商网站轮播图" class="headerlink" title="举例-原生JS电商网站轮播图"></a>举例-原生JS电商网站轮播图</h4><h5 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h5><p><a href="https://code.juejin.cn/pen/7189574916541251643">轮播图-原型</a></p><h6 id="HTML-结构"><a href="#HTML-结构" class="headerlink" title="HTML-结构"></a>HTML-结构</h6><p><img src="../images/JS%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/carbon%20(2).png" alt="carbon (2)"></p><h6 id="CSS-表现"><a href="#CSS-表现" class="headerlink" title="CSS-表现"></a>CSS-表现</h6><p><img src="../images/JS%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/carbon%20(6).png" alt="carbon (6)"></p><h6 id="JS-行为（功能API、控制流Event）"><a href="#JS-行为（功能API、控制流Event）" class="headerlink" title="JS-行为（功能API、控制流Event）"></a>JS-行为（功能API、控制流Event）</h6><p><img src="../images/JS%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/carbon%20(5).png" alt="carbon (5)"></p><h5 id="重构-插件化"><a href="#重构-插件化" class="headerlink" title="重构-插件化"></a>重构-插件化</h5><p><a href="https://code.juejin.cn/pen/7189573539517693986">轮播图-插件化</a></p><h6 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a>解耦</h6><ul><li>将控制元素抽成插件</li><li>插件与组件之间通过<strong>依赖注入</strong>方式建立联系</li></ul><p><img src="../images/JS%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230117191726546.png" alt="image-20230117191726546"></p><p><img src="../images/JS%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/carbon%20(8).png" alt="carbon (8)"></p><h5 id="重构-模块化"><a href="#重构-模块化" class="headerlink" title="重构-模块化"></a>重构-模块化</h5><p><a href="https://code.juejin.cn/pen/7189563473347477541">轮播图-模块化</a></p><h6 id="解耦-1"><a href="#解耦-1" class="headerlink" title="解耦"></a>解耦</h6><ul><li>将HTML模板化，更易于扩展</li></ul><h6 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h6><ul><li>将组件通用模型抽象出来，组件框架</li></ul><p><img src="../images/JS%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/carbon%20(4).png" alt="carbon (4)"></p><p><img src="../images/JS%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/carbon%20(9).png" alt="carbon (9)"></p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><h5 id="组件设计原则"><a href="#组件设计原则" class="headerlink" title="组件设计原则"></a>组件设计原则</h5><ul><li>封装性</li><li>正确性</li><li>扩展性</li><li>复用性</li></ul><h5 id="实现组件的步骤"><a href="#实现组件的步骤" class="headerlink" title="实现组件的步骤"></a>实现组件的步骤</h5><ul><li>结构设计</li><li>展现效果</li><li>行为设计</li></ul><h5 id="三次重构"><a href="#三次重构" class="headerlink" title="三次重构"></a>三次重构</h5><ul><li>模块化</li><li>模板化</li><li>抽象化（组件框架-组件是指Web页面上抽出来的一个包含模板、功能、样式的单元。）</li></ul><h3 id="JS编码原则-过程抽象"><a href="#JS编码原则-过程抽象" class="headerlink" title="JS编码原则-过程抽象"></a>JS编码原则-过程抽象</h3><blockquote><p>应用函数式编程思想</p></blockquote><h4 id="过程抽象"><a href="#过程抽象" class="headerlink" title="过程抽象"></a>过程抽象</h4><ul><li>用来处理局部细节控制的一些方法</li><li>函数式编程思想的基础应用</li></ul><h4 id="高阶函数-HOF"><a href="#高阶函数-HOF" class="headerlink" title="高阶函数-HOF"></a>高阶函数-HOF</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">HOF</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h5><p>为了能让“只执行一次”的需求覆盖不用的事件处理，可以将该需求剥离出来，这个过程称为“过程抽象”。</p><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul><li>以函数作为参数</li><li>以函数作为返回值</li><li>常用于作为函数装饰器</li></ul><h5 id="常用高阶函数"><a href="#常用高阶函数" class="headerlink" title="常用高阶函数"></a>常用高阶函数</h5><ul><li>Once<img src="../images/JS%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/carbon-1673957466450-60.png" alt="carbon"></li><li>Throttle 节流，限制函数执行间隔    <a href="https://code.juejin.cn/pen/7189592749836861455">栗子</a></li><li>Debounce 防抖，防止给服务器过多负担    <a href="https://code.juejin.cn/pen/7189593149349003279">栗子</a></li><li>Consumer /2 异步消耗    <a href="https://code.juejin.cn/pen/7189593573535416354">栗子</a></li><li>Iterative 迭代函数    <a href="https://code.juejin.cn/pen/7189594190404288571">栗子</a></li></ul><h4 id="编程范式"><a href="#编程范式" class="headerlink" title="编程范式"></a>编程范式</h4><h5 id="命令式"><a href="#命令式" class="headerlink" title="命令式"></a>命令式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> mapl = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    mapl.<span class="title function_">push</span>(list[i] * <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="声明式"><a href="#声明式" class="headerlink" title="声明式"></a>声明式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">double</span> = x =&gt; x * <span class="number">2</span>;</span><br><span class="line">list.<span class="title function_">map</span>(double);</span><br></pre></td></tr></table></figure><h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><p><a href="https://code.juejin.cn/pen/7189595739490943034">Toggle-命令式</a></p><p><a href="https://code.juejin.cn/pen/7189595796021444664">Toggle-声明式</a></p><p><a href="https://code.juejin.cn/pen/7189595847963705405">Toggle-三态</a>由此可见声明式更能减轻内容修改添加的代码量负担</p><h3 id="Left-pad事故背景引入"><a href="#Left-pad事故背景引入" class="headerlink" title="Left-pad事故背景引入"></a>Left-pad事故背景引入</h3><h4 id="栗子1-判断是否为单位矩阵"><a href="#栗子1-判断是否为单位矩阵" class="headerlink" title="栗子1-判断是否为单位矩阵"></a>栗子1-判断是否为单位矩阵</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isUnitMatrix2d</span>(<span class="params">m</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> m[<span class="number">0</span>] === <span class="number">1</span> &amp;&amp; m[<span class="number">1</span>] === <span class="number">0</span> &amp;&amp; m[<span class="number">2</span>] === <span class="number">0</span> &amp;&amp; m[<span class="number">3</span>] === <span class="number">1</span> &amp;&amp; m[<span class="number">4</span>] === <span class="number">0</span> &amp;&amp; m[<span class="number">5</span>] === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写代码最应该关注什么？</p><ul><li>风格——很重要，代码维护成本小关键</li><li>效率——很重要，结合场景选择合适代码，抉择是效率还是可读性</li><li>约定</li><li>使用场景</li><li>设计</li></ul><h4 id="栗子2-Left-pad事件"><a href="#栗子2-Left-pad事件" class="headerlink" title="栗子2-Left-pad事件"></a>栗子2-Left-pad事件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">leftpad</span>(<span class="params">str, len, ch</span>)&#123;</span><br><span class="line">    str = <span class="title class_">String</span>(str);</span><br><span class="line">    <span class="keyword">var</span> i = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(!ch &amp;&amp; ch !== <span class="number">0</span>) ch=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    len = len - str.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">while</span>(++i&lt;len)&#123;</span><br><span class="line">        str = ch + str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事件本身槽点：</p><ul><li>NPM模块粒度——模块化、打包工具不成熟</li><li>代码风格——可读性不算好</li><li>代码效率质量——效率不算高</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">leftpad</span>(<span class="params">str, len, ch</span>)&#123;</span><br><span class="line">    str = <span class="string">&quot;&quot;</span> + str;</span><br><span class="line">    <span class="keyword">const</span> padLen = len - str.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">if</span>(padLen &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>(<span class="string">&quot;&quot;</span>+ch).<span class="title function_">repeat</span>(padLen) + str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大佬优化：</p><ul><li>更简洁</li><li>更高效</li></ul><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat">巨佬优化</a></p><ul><li>性能更好</li></ul><p>但是就它的使用场景上，优化的意义不大。</p><p>（以下的部分本人效率就不高了，脑子转不动了，打算明天完善）</p><h3 id="JS代码质量优化"><a href="#JS代码质量优化" class="headerlink" title="JS代码质量优化"></a>JS代码质量优化</h3><h4 id="栗子1-交通灯状态切换"><a href="#栗子1-交通灯状态切换" class="headerlink" title="栗子1-交通灯状态切换"></a>栗子1-交通灯状态切换</h4><h5 id="1-过于繁琐，回调会出问题"><a href="#1-过于繁琐，回调会出问题" class="headerlink" title="1.过于繁琐，回调会出问题"></a>1.过于繁琐，回调会出问题</h5><p><a href="https://code.h5jun.com/jezew/2/edit?html,css,js,output">查看源码</a></p><h5 id="2-函数封装"><a href="#2-函数封装" class="headerlink" title="2.函数封装"></a>2.函数封装</h5><p><a href="https://code.h5jun.com/xof/5/edit?js,output">查看源码</a></p><h5 id="3-轮巡HOF"><a href="#3-轮巡HOF" class="headerlink" title="3.轮巡HOF"></a>3.轮巡HOF</h5><p><a href="https://code.h5jun.com/bodul/2/edit?js,output">查看源码</a></p><h5 id="4-异步命令式"><a href="#4-异步命令式" class="headerlink" title="4.异步命令式"></a>4.异步命令式</h5><p><a href="https://code.h5jun.com/jobe/3/edit?js,output">查看源码</a></p><p>可延伸异步声明式……</p><h4 id="栗子2-判断4的幂"><a href="#栗子2-判断4的幂" class="headerlink" title="栗子2-判断4的幂"></a>栗子2-判断4的幂</h4><h5 id="1-暴力循环"><a href="#1-暴力循环" class="headerlink" title="1.暴力循环"></a>1.暴力循环</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isPowerOfFour</span>(<span class="params">num</span>)&#123;</span><br><span class="line">    num = <span class="built_in">parseInt</span>(num);</span><br><span class="line">    <span class="keyword">while</span>(num&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(num%<span class="number">4</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        num /= <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isPowerOfFour</span>(<span class="params">num</span>)&#123;</span><br><span class="line">    num = <span class="built_in">parseInt</span>(num);</span><br><span class="line">    <span class="keyword">while</span>(num&gt;<span class="number">1</span>)&#123;</span><br><span class="line">       <span class="keyword">if</span>(num&amp; <span class="number">0b11</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       num &gt;&gt;&gt;=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isPowerOfFour</span>(<span class="params">num</span>)&#123;</span><br><span class="line">    num = <span class="built_in">parseInt</span>(num);</span><br><span class="line">    <span class="keyword">return</span> num &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (num&amp;(num - <span class="number">1</span>)) === <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (num&amp; <span class="number">0xAAAAAAAA</span>) === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="正则表达式-最喜欢的"><a href="#正则表达式-最喜欢的" class="headerlink" title="正则表达式-最喜欢的"></a>正则表达式-最喜欢的</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isPowerOfFour</span>(<span class="params">num</span>)&#123;</span><br><span class="line">    num = <span class="built_in">parseInt</span>(num).<span class="title function_">toString</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/^1(?:00)*$/</span>.<span class="title function_">test</span>(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="栗子3-洗牌"><a href="#栗子3-洗牌" class="headerlink" title="栗子3-洗牌"></a>栗子3-洗牌</h4><p>5555我又懒得敲了，明天继续！</p><h5 id="1-简单实现"><a href="#1-简单实现" class="headerlink" title="1.简单实现"></a>1.简单实现</h5><p><a href="https://code.h5jun.com/cuvig/edit?js,console">https://code.h5jun.com/cuvig/edit?js,console</a></p><h5 id="2-正确性"><a href="#2-正确性" class="headerlink" title="2.正确性"></a>2.正确性</h5><p><a href="https://code.h5jun.com/venol/edit?js,console">https://code.h5jun.com/venol/edit?js,console</a></p><h5 id="3-公平性"><a href="#3-公平性" class="headerlink" title="3.公平性"></a>3.公平性</h5><p><a href="https://code.h5jun.com/huqi/edit?js,console">https://code.h5jun.com/huqi/edit?js,console</a></p><h5 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h5><p><a href="https://code.h5jun.com/zamuv/edit?js,console">https://code.h5jun.com/zamuv/edit?js,console</a></p><h4 id="栗子4-分红包"><a href="#栗子4-分红包" class="headerlink" title="栗子4-分红包"></a>栗子4-分红包</h4><h5 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h5><p><a href="https://code.h5jun.com/wuv/1/edit?js,output">https://code.h5jun.com/wuv/1/edit?js,output</a></p><h5 id="2-1"><a href="#2-1" class="headerlink" title="2."></a>2.</h5><p><a href="https://code.h5jun.com/luba/edit?js,output">https://code.h5jun.com/luba/edit?js,output</a></p><h2 id="三、课后个人总结："><a href="#三、课后个人总结：" class="headerlink" title="三、课后个人总结："></a><strong>三、课后个人总结：</strong></h2><p>优雅，实在是太优雅了！</p><p>JS竟然有这么多层优化，我好像只在第一层！！！！</p><h2 id="四、引用参考："><a href="#四、引用参考：" class="headerlink" title="四、引用参考："></a><strong>四、引用参考：</strong></h2><p>见上文一些链接</p>]]></content>
      
      
      <categories>
          
          <category> 青训笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 青训营 </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS跟学笔记</title>
      <link href="/post/4b21.html"/>
      <url>/post/4b21.html</url>
      
        <content type="html"><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><p>正经人谁学CSS啊</p><h2 id="一、本堂课重点内容："><a href="#一、本堂课重点内容：" class="headerlink" title="一、本堂课重点内容："></a><strong>一、本堂课重点内容：</strong></h2><ul><li>了解CSS（是什么、如何使用、如何工作、一些重要属性键值、如何调试）</li><li>深入了解CSS（哪条规则生效、选择器特异度、CSS求值过程、CSS继承、布局、块级与行级）</li></ul><h2 id="二、详细知识点介绍："><a href="#二、详细知识点介绍：" class="headerlink" title="二、详细知识点介绍："></a><strong>二、详细知识点介绍：</strong></h2><h3 id="走进前端技术栈-CSS"><a href="#走进前端技术栈-CSS" class="headerlink" title="走进前端技术栈-CSS"></a>走进前端技术栈-CSS</h3><h4 id="什么是CSS"><a href="#什么是CSS" class="headerlink" title="什么是CSS"></a>什么是CSS</h4><ul><li>Cascading Style Sheets</li><li>用来定义页面元素的样式（字体、位置、动画效果等）</li></ul><h4 id="CSS组成"><a href="#CSS组成" class="headerlink" title="CSS组成"></a>CSS组成</h4><ul><li>选择器Selector</li><li>属性Property</li><li>属性值Value</li><li>声明Declaration  🌰： <code>selector &#123;   property: value;   （声明语句） &#125;</code></li></ul><h4 id="CSS使用"><a href="#CSS使用" class="headerlink" title="CSS使用"></a>CSS使用</h4><p>内联、嵌入、外链 </p><p><img src="../images/CSS%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230218121629136.png" alt="image-20230218121629136"></p><h4 id="CSS的工作"><a href="#CSS的工作" class="headerlink" title="CSS的工作"></a>CSS的工作</h4><p><img src="../images/CSS%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230218121638505.png" alt="image-20230218121638505"></p><h5 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h5><p>找出页面中的元素，以便给他们设置样式。</p><p>使用多种方式选择元素：按照标签名、类名或id，按照属性，按照DOM树中的位置</p><h6 id="选择器类型"><a href="#选择器类型" class="headerlink" title="选择器类型"></a>选择器类型</h6><ul><li>通配选择器 🌰:<code>* &#123;color:red; font-size: 20px&#125;</code></li><li>标签选择器</li><li>id选择器</li><li>类选择器（可出现多次，常用）</li><li>属性选择器</li></ul><p>属性🌰:<code>&lt;input value=&quot;haha&quot; disabled&gt;</code> <code>&lt;style&gt;[disabled] &#123;background: #eee;&#125;&lt;/style&gt;</code></p><p>带值属性🌰:<code>&lt;input type=&quot;passworld&quot;&gt;</code> <code>&lt;style&gt;input[type=&quot;passworld&quot;] &#123;color: red;&#125;&lt;/style&gt;</code></p><p>符合条件值属性🌰:<code>&lt;a href=&quot;#top&quot;回到顶部&gt;&lt;/a&gt;</code> <code>&lt;style&gt;a[href^=&quot;#&quot;] &#123;color: red;&#125;&lt;/style&gt;</code></p><ul><li><p>伪类（pseudo-classes）——不基于标签和属性定位元素</p><ul><li><p>状态性伪类🌰</p><p><img src="../images/CSS%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230218122353962.png" alt="image-20230218122353962"></p></li><li><p>结构性伪类🌰 （直接组合) </p><p><img src="../images/CSS%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230218122406549.png" alt="image-20230218122406549"></p></li><li><p>其他类型组合<img src="../images/CSS%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230218122417953.png" alt="image-20230218122417953"></p></li></ul></li></ul><h6 id="选择器组"><a href="#选择器组" class="headerlink" title="选择器组"></a>选择器组</h6><p>🌰：<code>body, h1, h2 &#123;margin: 0; padding: 0;&#125;</code></p><h4 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h4><h5 id="RGB"><a href="#RGB" class="headerlink" title="RGB"></a>RGB</h5><ul><li>rgb(值，值，值)</li><li>#8fac87(00-ff值)</li></ul><h5 id="HSL——Hue色相-Saturation饱和度-Lightness亮度"><a href="#HSL——Hue色相-Saturation饱和度-Lightness亮度" class="headerlink" title="HSL——Hue色相 Saturation饱和度 Lightness亮度"></a>HSL——Hue色相 Saturation饱和度 Lightness亮度</h5><ul><li>hsl(0-360, 100%, 100%)</li></ul><h5 id="一些颜色名"><a href="#一些颜色名" class="headerlink" title="一些颜色名"></a>一些颜色名</h5><p><img src="../images/CSS%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230218122428812.png" alt="image-20230218122428812"></p><h5 id="alpha透明度"><a href="#alpha透明度" class="headerlink" title="alpha透明度"></a>alpha透明度</h5><ul><li>rgba(值，值，值，0-1值)</li><li>#ff000078(0-1转化成0-255)</li><li>hsla(同上，0透明 1不透明)</li></ul><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><h5 id="字体族"><a href="#字体族" class="headerlink" title="字体族"></a>字体族</h5><p>font-family  🌰:<code>font-family:Optima,Georgia，Serif;</code></p><h6 id="经常放多个字体的原因"><a href="#经常放多个字体的原因" class="headerlink" title="经常放多个字体的原因"></a>经常放多个字体的原因</h6><p>不同客户使用的设备支持拥有和支持的字体不一样，有哪个用哪个。</p><h6 id="通用字体族"><a href="#通用字体族" class="headerlink" title="通用字体族"></a>通用字体族</h6><p><img src="../images/CSS%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230218122436470.png" alt="image-20230218122436470"></p><h6 id="使用Web-Fonts"><a href="#使用Web-Fonts" class="headerlink" title="使用Web Fonts"></a>使用Web Fonts</h6><p><img src="../images/CSS%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230218122443241.png" alt="image-20230218122443241"></p><h6 id="字体裁切"><a href="#字体裁切" class="headerlink" title="字体裁切"></a>字体裁切</h6><p>适当裁切字体，保证存储合适大小</p><h5 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h5><p>font-size(px,em,%)</p><h5 id="字体效果"><a href="#字体效果" class="headerlink" title="字体效果"></a>字体效果</h5><p>font-style(normal,italic斜体)</p><h5 id="字体粗细-字重"><a href="#字体粗细-字重" class="headerlink" title="字体粗细/字重"></a>字体粗细/字重</h5><p>font-weight(100-900,其中400:normal，700:bold)</p><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><ul><li>字体后面一定要添加一个字体族，以防万一！！</li><li>英文字体尽量写在中文字体前面</li><li>字重与字体密切相关</li></ul><h4 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h4><h5 id="行高"><a href="#行高" class="headerlink" title="行高"></a>行高</h5><p>line-height(1.6 在自身字体大小的倍数)</p><h5 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h5><p>text-align(right,left,center,justify)</p><h5 id="间距"><a href="#间距" class="headerlink" title="间距"></a>间距</h5><p>spacing 属性类型：</p><ul><li>letter-spacing：字间距</li><li>word-spacing：单词间距</li></ul><h5 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h5><p>text-indent(px)</p><h5 id="文段格式"><a href="#文段格式" class="headerlink" title="文段格式"></a>文段格式</h5><p>text-decoration(none,underline,line-through,overline)</p><h5 id="空白符处理"><a href="#空白符处理" class="headerlink" title="空白符处理"></a>空白符处理</h5><p>white-space 属性值：</p><ul><li>normal：默认，空白会被浏览器忽略</li><li>nowrap：文本不换行，会在同一行继续，直到</li><li>pre：空白保留，类似&lt;pre标签</li><li>pre-wrap：保留空白符序列，但是正常地进行换行</li><li>pre-line：合并空白符序列，但是保留换行符</li><li>inherit：规定应该从父元素继承white-space属性值</li></ul><h4 id="调试CSS"><a href="#调试CSS" class="headerlink" title="调试CSS"></a>调试CSS</h4><p>【检查】页面</p><h3 id="深入CSS（一）"><a href="#深入CSS（一）" class="headerlink" title="深入CSS（一）"></a>深入CSS（一）</h3><h4 id="选择器样式优先级"><a href="#选择器样式优先级" class="headerlink" title="选择器样式优先级"></a>选择器样式优先级</h4><p>Inline style（内联样式） &gt; Internal style sheet（内部样式） &gt; External style sheet（外部样式）&gt;！important &gt; 内联样式 &gt; ID 选择器 &gt; 类选择器 = 属性选择器 = 伪类选择器 &gt; 标签选择器 = 伪元素选择器 &gt; 通配选择器</p><p>🌰:</p><ul><li><p>内联样式：写在标签属性style的样式，如 </p></li><li><p>ID选择器，如#id{…}</p></li><li><p>类选择器，如 .class{…}</p></li><li><p>属性选择器，如 input[type=”email”]{…}</p></li><li><p>伪类选择器，如a:hover{…}</p></li><li><p>伪元素选择器，如 p::before{…}</p></li><li><p>标签选择器，如 input{…}</p></li><li><p>通配选择器，如 *{…}</p></li></ul><h5 id="选择器的特异度Specificity"><a href="#选择器的特异度Specificity" class="headerlink" title="选择器的特异度Specificity"></a>选择器的特异度Specificity</h5><p>通过比较元素使用选择器类型和数量判断选择器的特异度 </p><p><img src="../images/CSS%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230218122452047.png" alt="image-20230218122452047"></p><h5 id="使用策略"><a href="#使用策略" class="headerlink" title="使用策略"></a>使用策略</h5><h6 id="复用"><a href="#复用" class="headerlink" title="复用"></a>复用</h6><p><img src="../images/CSS%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230218122501623.png" alt="image-20230218122501623"></p><h6 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h6><p>扩展-CSS属性的继承性分类（光码不看没有用）</p><ul><li>不可继承的：display、margin、border、padding、background、height、min-height、max- height、width、min-width、max-width、overflow、position、left、right、top、 bottom、z-index、float、clear、table-layout、vertical-align、page-break-after、 page-bread-before和unicode-bidi。</li><li>所有元素可继承：visibility和cursor。</li><li>内联元素可继承：letter-spacing、word-spacing、white-space、line-height、color、font、 font-family、font-size、font-style、font-variant、font-weight、text- decoration、text-transform、direction。</li><li>块状元素可继承：text-indent和text-align。</li><li>列表元素可继承：list-style、list-style-type、list-style-position、list-style-image。</li><li>表格元素可继承：border-collapse。</li></ul><p>显示继承</p><p>把不可继承的变成可继承的，属性值：inherit</p><h6 id="属性的初始值initial"><a href="#属性的初始值initial" class="headerlink" title="属性的初始值initial"></a>属性的初始值initial</h6><h5 id="CSS运算过程"><a href="#CSS运算过程" class="headerlink" title="CSS运算过程"></a>CSS运算过程</h5><p><a href="https://link.juejin.cn/?target=url">cdpn.io/webzhao/deb…</a></p><h4 id="布局Layout"><a href="#布局Layout" class="headerlink" title="布局Layout"></a>布局Layout</h4><p>听累了写累了，整点截图喘口气↓</p><h5 id="常规流"><a href="#常规流" class="headerlink" title="常规流"></a>常规流</h5><p><img src="../images/CSS%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230218122508756.png" alt="image-20230218122508756"></p><h5 id="属性关系"><a href="#属性关系" class="headerlink" title="属性关系"></a>属性关系</h5><p><img src="../images/CSS%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230218122516618.png" alt="image-20230218122516618"></p><h5 id="border属性"><a href="#border属性" class="headerlink" title="border属性"></a>border属性</h5><p><img src="../images/CSS%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230218122523744.png" alt="image-20230218122523744"></p><h5 id="padding属性略"><a href="#padding属性略" class="headerlink" title="padding属性略"></a>padding属性略</h5><h5 id="margin属性"><a href="#margin属性" class="headerlink" title="margin属性"></a>margin属性</h5><p><code>margin:auto</code>:水平居中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">margin collapse</span><br></pre></td></tr></table></figure><h5 id="box-sizing-border-box非常常用↓"><a href="#box-sizing-border-box非常常用↓" class="headerlink" title="box-sizing:border-box非常常用↓"></a><strong>box-sizing:border-box</strong>非常常用↓</h5><p><img src="../images/CSS%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230218122530721.png" alt="image-20230218122530721"></p><h5 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h5><ul><li>visible</li><li>hidden</li><li>scrool</li></ul><h3 id="深入CSS（二）"><a href="#深入CSS（二）" class="headerlink" title="深入CSS（二）"></a>深入CSS（二）</h3><h4 id="块级和行级"><a href="#块级和行级" class="headerlink" title="块级和行级"></a>块级和行级</h4><p>不行了真的不行了，以后还是得用自己的工具写文档 </p><p><img src="../images/CSS%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230211095206059.png" alt="image-20230211095206059"></p><h2 id="三、课后个人总结："><a href="#三、课后个人总结：" class="headerlink" title="三、课后个人总结："></a><strong>三、课后个人总结：</strong></h2><p>1.跟着视频顺一遍真的很有用 2.选一款适合自己的写文档的工具很重要，不要图省事 3.写文档是个仔细活，需精进 4.不愧是CSS（脑子真的转不动了不知道怎么总结了，明天早上想好了写评论里）</p><h2 id="四、引用参考："><a href="#四、引用参考：" class="headerlink" title="四、引用参考："></a><strong>四、引用参考：</strong></h2><p><a href="https://link.juejin.cn/?target=https://www.nowcoder.com/questionTerminal/82951db93fec4c6bb1a5a44e649b2bfc">牛客真题1</a></p><p><a href="https://link.juejin.cn/?target=https://www.nowcoder.com/questionTerminal/e441b994986a411bb4872d640b790484">牛客真题2</a></p>]]></content>
      
      
      <categories>
          
          <category> 青训笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 青训营 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML跟学笔记</title>
      <link href="/post/f274.html"/>
      <url>/post/f274.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><p>正经人谁学HTML啊</p><h2 id="一、本堂课重点内容："><a href="#一、本堂课重点内容：" class="headerlink" title="一、本堂课重点内容："></a><strong>一、本堂课重点内容：</strong></h2><ul><li>HTML基本标签、属性、属性值</li><li>HTML语义化</li></ul><h2 id="二、详细知识点介绍："><a href="#二、详细知识点介绍：" class="headerlink" title="二、详细知识点介绍："></a><strong>二、详细知识点介绍：</strong></h2><p>HTML： TyperText Markup Language</p><h3 id="HTML基本标签"><a href="#HTML基本标签" class="headerlink" title="HTML基本标签"></a>HTML基本标签</h3><h4 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h4><p><code>&lt;ol&gt;&lt;li&gt;序号排列&lt;/li&gt;&lt;/ol&gt;</code></p><p><code>&lt;ul&gt;&lt;li&gt;无序号排列&lt;/li&gt;&lt;/ul&gt;</code></p><p><code>&lt;dl&gt;&lt;dt&gt;描述列表标题&lt;/dt&gt;&lt;dd&gt;具体元素1&lt;/dd&gt;&lt;dd&gt;具体元素2&lt;/dd&gt;&lt;/dl&gt;</code></p><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p><code>&lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;这_blank属性是让在新的页面中打开链接&lt;/a&gt;</code></p><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p><code>&lt;img src=&quot;&quot; alt=&quot;降级文字&quot;/&gt;</code></p><h4 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h4><p><code>&lt;audio src=&quot;&quot; controls(默认显示)&gt;&lt;/audio&gt;</code></p><h4 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h4><p><code>&lt;video src=&quot;&quot; contiols(同上）&gt;&lt;/vedio&gt;</code></p><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>好玩标签：</p><ul><li>input</li><li>textarea</li></ul><p>好玩属性：</p><ul><li>placeholder:未输入时的占位符</li></ul><p>好玩属性值：</p><ul><li>type=”range”滑动进度条</li><li>type=”number” min=”” max=””规定最大值最小值的数字输入</li><li>type=”date” min=”2022.12.31”规定最早从这个日期开始的日期输入</li></ul><p><img src="../images/HTML%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230211094752754.png" alt="image-20230211094752754"></p><h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><p>常规包裹：</p><p>!<img src="../images/HTML%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230211094742169.png" alt="image-20230211094742169">常规包裹</p><p>（坠后一种可以提供一些输入快捷提示)</p><p><img src="../images/HTML%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230211094725801.png" alt="image-20230211094725801"></p><h4 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h4><h5 id="块级引用"><a href="#块级引用" class="headerlink" title="块级引用"></a>块级引用</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">cite</span>=<span class="string">&quot;引用地址&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        一段话，比如说书内语句啥的</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="名称章节的短引用、具体内容的短引用"><a href="#名称章节的短引用、具体内容的短引用" class="headerlink" title="名称章节的短引用、具体内容的短引用"></a>名称章节的短引用、具体内容的短引用</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    在<span class="tag">&lt;<span class="name">cite</span>&gt;</span>第一章（斜体）<span class="tag">&lt;/<span class="name">cite</span>&gt;</span>，我们讲过<span class="tag">&lt;<span class="name">q</span>&gt;</span>字符号才能是不可变量（会有引号，表示之前写过的语句）<span class="tag">&lt;/<span class="name">q</span>&gt;</span>。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="代码的单行引用"><a href="#代码的单行引用" class="headerlink" title="代码的单行引用"></a>代码的单行引用</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span>const qvq = &quot;qvq&quot;<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="代码的多行引用"><a href="#代码的多行引用" class="headerlink" title="代码的多行引用"></a>代码的多行引用</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;<span class="name">code</span>&gt;</span></span><br><span class="line">const add = (a,b) =&gt; a + b;</span><br><span class="line">const multipy = (a,b) =&gt; a * b;</span><br><span class="line"><span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="紧急文本强调"><a href="#紧急文本强调" class="headerlink" title="紧急文本强调"></a>紧急文本强调</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    在投资前，<span class="tag">&lt;<span class="name">strong</span>&gt;</span>一定要做风险评估<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="语气文本强调"><a href="#语气文本强调" class="headerlink" title="语气文本强调"></a>语气文本强调</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    Cats <span class="tag">&lt;<span class="name">em</span>&gt;</span>are<span class="tag">&lt;/<span class="name">em</span>&gt;</span> cute animals.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果图见下方的</p><p><img src="../images/HTML%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230211094658863.png" alt="image-20230211094658863"></p><h3 id="HTML语义化"><a href="#HTML语义化" class="headerlink" title="HTML语义化"></a>HTML语义化</h3><h4 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h4><p><img src="../images/HTML%E8%B7%9F%E5%AD%A6%E7%AC%94%E8%AE%B0/image-20230211094624477.png" alt="image-20230211094624477"></p><h4 id="语义化作用"><a href="#语义化作用" class="headerlink" title="语义化作用"></a>语义化作用</h4><p>代码可读性、可维护性、搜索引擎优化、提升无障碍性</p><h4 id="如何做到语义化"><a href="#如何做到语义化" class="headerlink" title="如何做到语义化"></a>如何做到语义化</h4><ul><li><p>了解每个标签和属性的含义</p></li><li><p>思考什么标签最适合描述该内容</p></li><li><p>不使用可视化工具生成代码</p></li><li><p>涉及到的语义化标签整理</p></li></ul><h4 id="页面内容划分"><a href="#页面内容划分" class="headerlink" title="页面内容划分"></a>页面内容划分</h4><ul><li>header：页眉,通常包括网站标志、主导航、全站链接以及搜索框。</li><li>nav：标记导航。</li><li>main：页面主要内容，一个页面只能用一次。</li><li>article：定义外部的内容，其中的内容独立于文档的其余部分。</li><li>aside：定义其所处内容之外的内容。如侧栏、文章的一组链接、广告、友情链接、相关产品列表等。</li><li>footer：页脚，只有当父级是body时，才是整个页面的页脚。</li></ul><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><ul><li>title：定义文档标题,只能在head标签内出现。</li><li>hn：h1~h6，分级标题，与 title 协调有利于搜索引擎优化。</li></ul><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><ul><li>ul：无序列表。</li><li>ol：有序列表。</li></ul><h4 id="强调和引用"><a href="#强调和引用" class="headerlink" title="强调和引用"></a>强调和引用</h4><ul><li>small：呈现小号字体效果，指定细则，输入免责声明、注解、署名、版权。</li><li>strong：和 em 标签一样，用于强调文本，但它强调的程度更强一些。</li><li>em：将其中的文本表示为强调的内容，表现为斜体。</li><li>mark：使用黄色突出显示部分文本。</li><li>cite：表示所包含的文本对某个参考文献的引用，比如书籍或者杂志的标题。</li><li>blockquoto：块级引用，块引用拥有它们自己的空间。</li><li>q：短的引述，引用写过的内容。</li><li>code：标记代码。</li></ul><h2 id="三、课后个人总结："><a href="#三、课后个人总结：" class="headerlink" title="三、课后个人总结："></a><strong>三、课后个人总结：</strong></h2><p>回顾了常见的HTML语义化标签，进一步了解语义化标签优势。</p><h2 id="四、引用参考："><a href="#四、引用参考：" class="headerlink" title="四、引用参考："></a><strong>四、引用参考：</strong></h2><p><a href="https://link.juejin.cn/?target=_blanck">HTML语义化-CSDN</a></p>]]></content>
      
      
      <categories>
          
          <category> 青训笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 青训营 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vite跟学笔记</title>
      <link href="/post/db5b.html"/>
      <url>/post/db5b.html</url>
      
        <content type="html"><![CDATA[<h1 id="Vite跟学笔记"><a href="#Vite跟学笔记" class="headerlink" title="Vite跟学笔记"></a>Vite跟学笔记</h1><p>正经人谁学Vite啊</p><h2 id="Vite系列课程前言"><a href="#Vite系列课程前言" class="headerlink" title="Vite系列课程前言"></a>Vite系列课程前言</h2><h3 id="冰山一角"><a href="#冰山一角" class="headerlink" title="冰山一角"></a>冰山一角</h3><ol><li><p>Vite: 思维比较前卫而且先进的构建工具 他确实解决了一些webpack解决不了的问题, 同时降低了一些心智负担</p></li><li><p>已经有一些大厂在使用Vite去构建项目</p></li><li><p>Vite基于自己得天独厚的优势, 他未来一定会占有一席之地 前段时间阿里的面试已经在问Vite了</p></li><li><p>Vite是Vue团队的官方出品, 背靠这么大的生态, Vue-cli会在下面两个版本中将vite作为预设构建工具 </p></li><li><p>未来你使用vue-cli去构建vue项目的时候你要写的vue.config.js不再是webpack的配置而是vite的配置(目前只基于浏览器项目)</p></li><li><p>Vite也支持直接构建react项目, 也支持构建angular项目, svelte项目也支持构建</p></li></ol><h3 id="学习模块"><a href="#学习模块" class="headerlink" title="学习模块"></a>学习模块</h3><ol><li>什么是构建工具? </li><li>webpack的一个缺点在哪</li><li>es module的规范</li><li>vite他到底是什么东西 </li><li>vite的基本安装和使用</li><li>vite的编译结果</li><li>vite编译结果的分析</li><li>vite的配置文件(可能会有节课程)</li><li>vite中处理css, 静态资源怎么去做</li><li>vite的插件以及常用插件的使用</li><li>vite与ts的结合</li><li>vite生产打包</li><li>vite构建react项目, svelte项目, vue3项目</li><li>vite的一个构建原理 </li></ol><h2 id="什么是构建工具"><a href="#什么是构建工具" class="headerlink" title="什么是构建工具"></a>什么是构建工具</h2><p><strong>浏览器它只能识别html css js</strong></p><h3 id="企业及项目可能具备哪些功能"><a href="#企业及项目可能具备哪些功能" class="headerlink" title="企业及项目可能具备哪些功能"></a>企业及项目可能具备哪些功能</h3><ol><li>typescript: 如果遇到ts文件我们需要使用tsc将typescript代码转换为js代码   </li><li>React/Vue: 安装react-compiler / vue-complier, 将我们写的jsx文件或者.vue文件转换为render函数</li><li>less/sass/postcss/component-style: 我们又需要安装less-loader, sass-loader等一系列编译工具</li><li>语法降级: babel —&gt; 将es的新语法转换旧版浏览器可以接受的语法</li><li>体积优化: uglifyjs —&gt; 将我们的代码进行压缩变成体积更小性能更高的文件</li><li>…..</li></ol><p>稍微改一点点东西, 非常麻烦</p><blockquote><p>e.g.将App.tsx —&gt; tsc —&gt; App.jsx —&gt; React-complier —&gt; js文件 </p></blockquote><p>有一个东西能够帮你把tsc, react-compiler, less, babel, uglifyjs全部集成到一起，让我们只需要关心我们写的代码就好了 </p><blockquote><p>e.g.我们写的代码一变化 —&gt; 有人帮我们自动去tsc, react-compiler, less, babel, uglifyjs全部挨个走一遍 —&gt; js</p></blockquote><p>↑这个东西就叫做<strong>构建工具</strong></p><blockquote><p>打包: 将我们写的浏览器不认识的代码 交给构建工具进行编译处理的过程就叫做打包, 打包完成以后会给我们一个浏览器可以认识的文件</p></blockquote><h3 id="构建工具承担的工作"><a href="#构建工具承担的工作" class="headerlink" title="构建工具承担的工作"></a>构建工具承担的工作</h3><ol><li>模块化开发支持: 支持直接从node_modules里引入代码 + 多种模块化支持</li><li>处理代码兼容性: 比如babel语法降级, less,ts 语法转换(<strong>不是构建工具做的, 构建工具将这些语法对应的处理工具集成进来自动化处理</strong>)</li><li>提高项目性能: 压缩文件, <strong>代码分割</strong></li><li>优化开发体验: <ul><li>构建工具会帮你自动监听文件的变化, 当文件变化以后自动帮你调用对应的集成工具进行重新打包, 然后再浏览器重新运行（整个过程叫做热更新, hot replacement</li><li>开发服务器: 跨域的问题, 用react-cli create-react-element vue-cli  解决跨域的问题, </li></ul></li></ol><p>每次改一点 —&gt; 这个顺序还不能错 </p><h3 id="构建工具的作用"><a href="#构建工具的作用" class="headerlink" title="构建工具的作用"></a>构建工具的作用</h3><ol><li><p>构建工具让我们可以不用每次都关心我们的代码在浏览器中如何运行，我们只需要首次给构建工具提供一个配置文件（必须），有了这个集成的配置文件以后，我们就可以在下次需要更新的时候调用一次对应的命令就好了。</p></li><li><p>如果我们再结合热更新，我们就更加不需要管任何东西了。</p></li></ol><p>==它让我们不用关心生产的代码，也不用担心代码如何在浏览器运行，只需要关心我们开发怎么写得爽。==</p><h3 id="市面上主流构建工具"><a href="#市面上主流构建工具" class="headerlink" title="市面上主流构建工具"></a>市面上主流构建工具</h3><ul><li>webpack-国内主流</li><li>vite-国内主流，本次学习</li><li>parcel</li><li>esbuild-国内主流</li><li>rollup</li><li>grunt</li><li>gulp</li></ul><h2 id="vite相较于webpack的优势"><a href="#vite相较于webpack的优势" class="headerlink" title="vite相较于webpack的优势"></a>vite相较于webpack的优势</h2><blockquote><p>然而，当我们开始构建越来越大型的应用时，需要处理的 JavaScript 代码量也呈指数级增长。</p><p>包含数千个模块的大型项目相当普遍。基于 JavaScript 开发的工具就会开始遇到性能瓶颈：通常需要很长时间（甚至是几分钟！）才能启动开发服务器，即使使用模块热替换（HMR），文件修改后的效果也需要几秒钟才能在浏览器中反映出来。如此循环往复，迟钝的反馈会极大地影响开发者的开发效率和幸福感。</p><p>Vite 旨在利用生态系统中的新进展解决上述问题：浏览器开始原生支持 ES 模块，且越来越多 JavaScript 工具使用编译型语言编写。</p></blockquote><ul><li>==采取先开启开发服务器==</li><li>==不会把所有依赖都解析完==</li></ul><h3 id="构建工具存在的问题"><a href="#构建工具存在的问题" class="headerlink" title="构建工具存在的问题"></a>构建工具存在的问题</h3><p>项目越大，构建工具所需要处理的js代码就越多=&gt;构建工具需要很长时间才能启动开发服务器</p><h3 id="举一个webpack栗子"><a href="#举一个webpack栗子" class="headerlink" title="举一个webpack栗子"></a>举一个webpack栗子</h3><p>众所周知，==webpack支持多种模块化==，你的工程可能不止泡在浏览器端。</p><p>那webpack能不能改？一旦要改，将会动到它的大动脉。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> loadsh = <span class="built_in">require</span>(<span class="string">&quot;loadsh&quot;</span>)<span class="comment">//commonjs规范</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span><span class="comment">//es6规范</span></span><br><span class="line">|</span><br><span class="line">|经过一定过程，webpack转换（构建工具是运行在服务端的）</span><br><span class="line">↓    </span><br><span class="line"><span class="keyword">const</span> loadsh = <span class="title function_">webpack_require</span>(<span class="string">&quot;loadsh&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Vue</span> = <span class="title function_">webpack_require</span>(<span class="string">&quot;vue&quot;</span>)</span><br><span class="line"></span><br><span class="line">延伸原理（不需要看懂）</span><br><span class="line">(<span class="keyword">function</span>(<span class="params">modules</span>)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">webpack_require</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">    <span class="comment">//入口是index.js</span></span><br><span class="line">    <span class="comment">//通过webpack的配置文件得来的：webpack.config.js ./src/index.js</span></span><br><span class="line">    modules[entry](webpack_require);</span><br><span class="line">&#125;,(&#123;</span><br><span class="line">    <span class="string">&quot;./src/index.js&quot;</span>: <span class="function">(<span class="params">webpack_require</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> lodash = <span class="title function_">webpack_require</span>(<span class="string">&quot;lodash&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">Vue</span> = <span class="title function_">webpack_require</span>(<span class="string">&quot;vue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><p>因为webpack支持多种模块化，它一旦开始必须要统一模块化代码，意味着它需要将所有的依赖全部读一遍。</p><h3 id="Vite呢？"><a href="#Vite呢？" class="headerlink" title="Vite呢？"></a>Vite呢？</h3><p>当然不！</p><p>两者侧重点不一样。Vite基于es module，更关注浏览器端的开发体验；而webpack更多关注兼容性。</p><h2 id="vite和webpack启动工程比较"><a href="#vite和webpack启动工程比较" class="headerlink" title="vite和webpack启动工程比较"></a>vite和webpack启动工程比较</h2><ol><li>是通过使用vue-cli去构建一个基于webpack的vue工程</li><li>使用vite去构建一个基于vite的vue工程</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> @vue/<span class="built_in">cli</span></span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">yarn global add @vue/<span class="built_in">cli</span></span><br></pre></td></tr></table></figure><ul><li>全局安装: 这个依赖会被安装到你的用户目录, 某些依赖还会自动给你注入环境变量 别名注入一个vue<ul><li>webpack去找寻依赖的时候他并不会只找寻当前目录的node_modules, 他会依次往上找直到在根目录都没有找到对应的依赖, 他才会报错</li><li>所以我们全局安装的话无论在哪个文件夹下里都可以访问到这个依赖</li></ul></li><li>非全局安装<ul><li>生产状态: -S</li><li>开发状态: -D eslint </li></ul></li></ul><h2 id="搭建一个vite项目"><a href="#搭建一个vite项目" class="headerlink" title="搭建一个vite项目"></a>搭建一个vite项目</h2><h3 id="必须要理解的vite脚手架和vite"><a href="#必须要理解的vite脚手架和vite" class="headerlink" title="必须要理解的vite脚手架和vite"></a>必须要理解的vite脚手架和vite</h3><ol><li>全局安装create-vite ——vite脚手架</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn create vite</span><br></pre></td></tr></table></figure><ol start="2"><li>直接运行create-vite bin目录下的一个执行配置</li></ol><ul><li>​    误区：认为官网中使用对应yarn create构建项目的过程也是vite在做的事情</li><li>​    create-vite和vite的关系：前者内置了后者</li></ul><h4 id="什么是精装修？（doge）"><a href="#什么是精装修？（doge）" class="headerlink" title="什么是精装修？（doge）"></a>什么是精装修？（doge）</h4><blockquote><p>vue-cli/create-react-app：把vue/react都下好了，同时还帮忙把配置调整到了最佳实践</p><p>create-vite： 给你一套预设，下载了各种东西，并且做好了最佳实践的配置</p></blockquote><h4 id="区分"><a href="#区分" class="headerlink" title="区分"></a>区分</h4><ul><li>vite–&gt;webpack</li><li>create-vite–&gt;vue-cli</li></ul><h3 id="vite启动项目初体验"><a href="#vite启动项目初体验" class="headerlink" title="vite启动项目初体验"></a>vite启动项目初体验</h3><p>vite开箱即用（out of box）：你不需要做任何额外的配置就可以使用vite来帮助你处理构建工作。</p><p>在默认情况下，esmodule去导入资源的时候，要么是绝对路径，要么是相对。</p><p>既然最佳实践就是node_modules，那么为什么es官方在给我们导入非绝对路径和绝对路径资源的饿时候不默认帮我们搜寻node_modules呢？？</p><p>通过网络请求去找的，太消耗性能了。</p><h3 id="vite的预加载"><a href="#vite的预加载" class="headerlink" title="vite的预加载"></a>vite的预加载</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&quot;lodash&quot;</span>; <span class="comment">// lodash可能也import了其他的东西</span></span><br></pre></td></tr></table></figure><p>在处理的过程中如果说看到了有非绝对路径或者相对路径的引用, 他则会尝试开启路径补全</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&quot;/node_modules/.vite/lodash&quot;</span>; <span class="comment">// lodash可能也import了其他的东西</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> __vite__cjsImport0_lodash <span class="keyword">from</span> <span class="string">&quot;/node_modules/.vite/deps/lodash.js?v=ebe57916&quot;</span>;</span><br></pre></td></tr></table></figure><p>找寻依赖的过程是自当前目录依次向上查找的过程, 直到搜寻到根目录或者搜寻到对应依赖为止 /user/node_modules/lodash, ../</p><h4 id="生产和开发"><a href="#生产和开发" class="headerlink" title="生产和开发"></a>生产和开发</h4><p>yarn dev —&gt; 开发(每次依赖预构建所重新构建的相对路径都是正确的)</p><p>vite会全权交给一个叫做rollup的库去完成生产环境的打包</p><p>缓存 —&gt; </p><p>实际上vite在考虑另外一个问题的时候就顺便把这个问题解决了</p><p>commonjs 规范的导出 module.exports </p><p>有的包他是以commonjs规范的格式导出 axios </p><p><strong>依赖预构建</strong>: 首先vite会找到对应的依赖, 然后调用esbuild(对js语法进行处理的一个库), 将其他规范的代码转换成esmodule规范, 然后放到当前目录下的node_modules/.vite/deps, 同时对esmodule规范的各个模块进行统一集成 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> a  &#125; <span class="keyword">from</span> <span class="string">&quot;./a.js&quot;</span></span><br></pre></td></tr></table></figure><p>vite重写以后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;&#125;</span><br></pre></td></tr></table></figure><p>他解决了3个问题: </p><ol><li>不同的第三方包会有不同的导出格式(这个是vite没法约束人家的事情)</li><li>对路径的处理上可以直接使用.vite/deps, 方便路径重写</li><li>叫做网络多包传输的性能问题(也是原生esmodule规范不敢支持node_modules的原因之一), 有了依赖预构建以后无论他有多少的额外export 和import, vite都会尽可能的将他们进行集成最后只生成一个或者几个模块</li></ol><p>vite.config.js === webpack.config.hs</p><h1 id="vite-配置文件处理细节"><a href="#vite-配置文件处理细节" class="headerlink" title="vite 配置文件处理细节"></a>vite 配置文件处理细节</h1><ol><li>vite配置文件的语法提示<ol><li>如果你使用的是webstorm, 那你可以得到很好的语法补全</li><li>如果你使用是vscode或者其他的编辑器, 则需要做一些特殊处理</li></ol></li><li>关于环境的处理<br>过去我们使用webpack的时候, 我们要区分配置文件的一个环境<ul><li>webpack.dev.config</li><li>webpack.prod.config</li><li>webpack.base.config</li><li>webpackmerge</li></ul></li></ol><h1 id="vite和ts的结合"><a href="#vite和ts的结合" class="headerlink" title="vite和ts的结合"></a>vite和ts的结合</h1><blockquote><p>vite他天生就对ts支持非常良好, 因为vite在开发时态是基于esbuild, 而esbuild是天生支持对ts文件的转换的</p></blockquote><p>那么对ts的校验呢？</p><blockquote><p>vite只对ts文件进行转换, 并不会对ts文件进行类型检查</p></blockquote><ol><li>安装一个插件: vite-plugin-eslint</li></ol><p>  我们的这个插件只会在开发时态帮助我们校验ts语法</p><p>为什么我们在vite.config.js里可以使用esmodule: 主要是因为vite在读取配置文件并执行的前一刻会进行替换</p><h1 id="vite环境变量配置"><a href="#vite环境变量配置" class="headerlink" title="vite环境变量配置"></a>vite环境变量配置</h1><blockquote><p>环境变量: 会根据当前的代码环境产生值的变化的变量就叫做环境变量</p></blockquote><p>代码环境:</p><ol><li>开发环境</li><li>测试环境</li><li>预发布环境</li><li>灰度环境</li><li>生产环境</li></ol><p>举个例子: 百度地图sdk, 小程序的sdk</p><p>APP_KEY: 测试环境和生产还有开发环境是不一样的key </p><ul><li>开发环境: 110</li><li>生产环境: 111</li><li>测试环境: 112</li></ul><p>我们去请求第三方sdk接口的时候需要带上的一个身份信息</p><p>我们在和后端同学对接的时候, 前端在开发环境中请求的后端API地址和生产环境的后端API地址是一个吗？ 肯定不是同一个</p><ul><li>开发和测试: <a href="http://test.api/">http://test.api/</a></li><li>生产: <a href="https://api/">https://api/</a></li></ul><p>在vite中的环境变量处理:</p><p>vite内置了dotenv这个第三方库</p><p>dotenv会自动读取.env文件, 并解析这个文件中的对应环境变量 并将其注入到process对象下(但是vite考虑到和其他配置的一些冲突问题, 他不会直接注入到process对象下)</p><p>涉及到vite.config.js中的一些配置:</p><ul><li>root</li><li>envDir: 用来配置当前环境变量的文件地址</li></ul><p>vite给我们提供了一些补偿措施:我们可以调用vite的loadEnv来手动确认env文件</p><p>process.cwd方法: 返回当前node进程的工作目录</p><p>.env: 所有环境都需要用到的环境变量<br>.env.development: 开发环境需要用到的环境变量(默认情况下vite将我们的开发环境取名为development)<br>.env.production: 生产环境需要用到的环境变量(默认情况下vite将我们的生产环境取名为production)</p><p>yarn dev –mode development 会将mode设置为development传递进来</p><p>当我们调用loadenv的时候, 他会做如下几件事:</p><ol><li>直接找到.env文件不解释 并解析其中的环境变量 并放进一个对象里</li><li>会将传进来的mode这个变量的值进行拼接: <code>.env.development</code>,  并根据我们提供的目录去取对应的配置文件并进行解析, 并放进一个对象</li><li>我们可以理解为<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> baseEnvConfig = 读取.<span class="property">env</span>的配置</span><br><span class="line"><span class="keyword">const</span> modeEnvConfig = 读取env相关配置</span><br><span class="line"><span class="keyword">const</span> lastEnvConfig = &#123; ...baseEnvConfig, ...modeEnvConfig &#125;</span><br></pre></td></tr></table></figure></li></ol><p>如果是客户端, vite会将对应的环境变量注入到import.meta.env里去</p><p>vite做了一个拦截, 他为了防止我们将隐私性的变量直接送进import.meta.env中, 所以他做了一层拦截, 如果你的环境变量不是以VITE开头的, 他就不会帮你注入到客户端中去, 如果我们想要更改这个前缀, 可以去使用envPrefix配置</p><p>补充一个小知识: 为什么vite.config.js可以书写成esmodule的形式, 这是因为vite他在读取这个vite.config.js的时候会率先node去解析文件语法, 如果发现你是esmodule规范会直接将你的esmodule规范进行替换变成commonjs规范</p><h1 id="【原理篇】vite是怎么让浏览器可以识别-vue文件的"><a href="#【原理篇】vite是怎么让浏览器可以识别-vue文件的" class="headerlink" title="【原理篇】vite是怎么让浏览器可以识别.vue文件的"></a>【原理篇】vite是怎么让浏览器可以识别.vue文件的</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn install vite</span><br></pre></td></tr></table></figure><p>yarn create 实际上就等于在安装create-vite脚手架 然后使用脚手架的指令去构建项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn create vite my-vue-app --template vue</span><br></pre></td></tr></table></figure><p>我们来实现一套简单的vite的开发服务器</p><ol><li>解决我们刚刚的这个问题</li><li>让大家对开发服务器的原理层面有一个基础的简单的认识</li></ol><p>会涉及到node的一些知识</p><p>koa: node端的一个框架</p><p>那么我们平时去访问一个网页的时候, 我们敲下域名: baidu.com</p><h1 id="在vite中处理css"><a href="#在vite中处理css" class="headerlink" title="在vite中处理css"></a>在vite中处理css</h1><p>vite天生就支持对css文件的直接处理</p><ol><li>vite在读取到main.js中引用到了Index.css</li><li>直接去使用fs模块去读取index.css中文件内容</li><li>直接创建一个style标签, 将index.css中文件内容直接copy进style标签里</li><li>将style标签插入到index.html的head中</li><li>将该css文件中的内容直接替换为js脚本(方便热更新或者css模块化), 同时设置Content-Type为js 从而让浏览器以JS脚本的形式来执行该css后缀的文件</li></ol><p>场景:</p><ul><li>一个组件最外层的元素类名一般取名 : wrapper</li><li>一个组件最底层的元素雷明明我们一般取名: .footer</li></ul><p>你取了footer这个名字, 别人因为没有看过你这个组件的源代码, 也可能去取名footer这个类名</p><p>最终可能会导致样式被覆盖（因为类名重复）, 这就是我们在协同开发的时候很容易出现的问题</p><p>cssmodule就是来解决这个问题的</p><p>大概说一下原理: </p><p>全部都是基于node</p><ol><li>module.css (module是一种约定, 表示需要开启css模块化)</li><li>他会将你的所有类名进行一定规则的替换（将footer 替换成 _footer_i22st_1）</li><li>同时创建一个映射对象{ footer: “_footer_i22st_1” }</li><li>将替换过后的内容塞进style标签里然后放入到head标签中 (能够读到index.html的文件内容)</li><li>将componentA.module.css内容进行全部抹除, 替换成JS脚本</li><li>将创建的映射对象在脚本中进行默认导出</li></ol><p>less(预处理器): less给我们提供了一些方便且非常实用的方法</p><h1 id="vite-config-js中css配置（modules篇）"><a href="#vite-config-js中css配置（modules篇）" class="headerlink" title="vite.config.js中css配置（modules篇）"></a>vite.config.js中css配置（modules篇）</h1><p>在vite.config.js中我们通过css属性去控制真个vite对于css的处理行为</p><ul><li>localConvention: 修改生成的配置对象的key的展示形式(驼峰还是中划线形式)</li><li>scopeBehaviour: 配置当前的模块化行为是模块化还是全局化 (有hash就是开启了模块化的一个标志, 因为他可以保证产生不同的hash值来控制我们的样式类名不被覆盖)</li><li>generateScopedName: 生成的类名的规则(可以配置为函数, 也可以配置成字符串规则: <a href="https://github.com/webpack/loader-utils#interpolatename">https://github.com/webpack/loader-utils#interpolatename</a>)</li><li>hashPrefix: 生成hash会根据你的类名 + 一些其他的字符串(文件名 + 他内部随机生成一个字符串)去进行生成, 如果你想要你生成hash更加的独特一点, 你可以配置hashPrefix, 你配置的这个字符串会参与到最终的hash生成, （hash: 只要你的字符串有一个字不一样, 那么生成的hash就完全不一样, 但是只要你的字符串完全一样, 生成的hash就会一样）</li><li>globalModulePaths: 代表你不想参与到css模块化的路径</li></ul><h1 id="vite配置文件中css配置流程-preprocessorOptions篇"><a href="#vite配置文件中css配置流程-preprocessorOptions篇" class="headerlink" title="vite配置文件中css配置流程(preprocessorOptions篇)"></a>vite配置文件中css配置流程(preprocessorOptions篇)</h1><p>主要是用来配置css预处理的一些全局参数</p><p>假设没有使用构建工具, 我们又想去编译less文件的话</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add less # lessc的编译器</span><br></pre></td></tr></table></figure><p>你只要安装了node, 你就可以使用node index.js</p><p>你只要安装了less 你就可以使用lessc去编译less文件</p><p>less是可以定义变量的</p><h2 id="sourceMap"><a href="#sourceMap" class="headerlink" title="sourceMap"></a>sourceMap</h2><p>文件之间的索引: </p><p>假设我们的代码被压缩或者被编译过了, 这个时候假设程序出错, 他将不会产生正确的错误位置信息 如果设置了sourceMap, 他就会有一个索引文件map </p><p>sourceMap解决的问题极其的微小, 但是他的实现过程非常的复杂</p><h1 id="postcss"><a href="#postcss" class="headerlink" title="postcss"></a>postcss</h1><p>vite天生对postcss有非常良好的支持</p><p>全屋净水系统有一个了解</p><p>水龙头里来的水是自来水 </p><p>自来水 从 管道里 先到这个全屋净水系统 给全屋净水系统做一些插槽 —&gt; 去除砂砾 –&gt; 净化细菌微生物 —&gt; … –&gt; 输送到水龙头 –&gt; 我们可以喝的纯净水 （为了保证到我们嘴里喝的水是万无一失）</p><p>postcss 他的工作基本和全屋净水系统一致: 保证css在执行起来是万无一失的</p><p><strong>都对postcss有一个误区: 他们认为postcss和less sass是差不多级别</strong></p><p>我们写的css代码(怎么爽怎么来) –&gt; postcss —&gt; less –&gt; 再次对未来的高级css语法进行降级 –&gt; 前缀补全 –&gt; 浏览器客户端 </p><p>目前来说 less和sass等一系列预处理器的postcss插件已经停止维护了 less插件 你自己去用less和sass编译完了, 然后你把编译结果给我</p><p><strong>所以业内就产生了一个新的说法: postcss是后处理器</strong> less的postcss的插件就ok了 </p><p>我们写的js代码(怎么爽怎么来) –&gt; babel –&gt; 将最新的ts语法进行转换js语法 –&gt; 做一次语法降级  –&gt; 浏览器客户端去执行</p><p>babel –&gt; 帮助我们让js执行起来万无一失 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> &#123;&#125; <span class="comment">// es6的写法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;&#125; <span class="comment">// es3的语法</span></span><br></pre></td></tr></table></figure><p>浏览器的兼容性你能考虑到吗, 预处理器并不能够解决这些问题:</p><ol><li>对未来css属性的一些使用降级问题</li><li>前缀补全: Google非常卷 –webkit </li></ol><h2 id="使用postcss"><a href="#使用postcss" class="headerlink" title="使用postcss"></a>使用postcss</h2><ol><li><p>安装依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add postcss-cli postcss -D</span><br></pre></td></tr></table></figure></li><li><p>书写描述文件</p></li></ol><p>postcss配置文件的格式</p><ul><li>postcss.config.js</li></ul><h1 id="为什么我们在服务端处理路径的时候一定要用path"><a href="#为什么我们在服务端处理路径的时候一定要用path" class="headerlink" title="为什么我们在服务端处理路径的时候一定要用path"></a>为什么我们在服务端处理路径的时候一定要用path</h1><h1 id="vite配置文件中css配置流程-postcss篇"><a href="#vite配置文件中css配置流程-postcss篇" class="headerlink" title="vite配置文件中css配置流程(postcss篇)"></a>vite配置文件中css配置流程(postcss篇)</h1><p>直接在css.postcss中进行配置, 该属性直接配置的就是postcss的配置</p><ul><li>postcss-preset-env: 支持css变量和一些未来css语法 自动补全(autoprefixer)</li></ul><h1 id="vite加载静态资源"><a href="#vite加载静态资源" class="headerlink" title="vite加载静态资源"></a>vite加载静态资源</h1><p>什么是静态资源？ </p><p>​    图片, 视频资源</p><p>除了动态API以外, 百分之九十九资源都被视作静态资源 API –&gt; 来了一个请求 /getUserName</p><p>vite对静态资源基本上是开箱即用的, 除了一些特殊情况(svg)</p><h1 id="resolve-alias的原理"><a href="#resolve-alias的原理" class="headerlink" title="resolve.alias的原理"></a>resolve.alias的原理</h1><h1 id="vite中处理svg资源"><a href="#vite中处理svg资源" class="headerlink" title="vite中处理svg资源"></a>vite中处理svg资源</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li><p>vite对svg有特殊处理 (❌)</p></li><li><p>vite对svg依旧是开箱即用的</p></li><li><p>svg: scalable vector graphics 可伸缩矢量图形 (新的图片格式)</p></li><li><p>传统图片格式: jpg, jpeg…</p></li></ul><h2 id="svg特点"><a href="#svg特点" class="headerlink" title="svg特点"></a>svg特点</h2><ol><li><p>svg是不会失真的 </p></li><li><p>尺寸小</p></li></ol><h2 id="SVG缺点"><a href="#SVG缺点" class="headerlink" title="SVG缺点"></a>SVG缺点</h2><p>​    没法很好的去表示层次丰富的图片信息</p><blockquote><p> 前端领域里更多的是用svg 去做图标</p></blockquote><h1 id="vite在生产环境对静态资源的处理"><a href="#vite在生产环境对静态资源的处理" class="headerlink" title="vite在生产环境对静态资源的处理"></a>vite在生产环境对静态资源的处理</h1><p>当我们将工程进行打包以后, 会发现找不到原来的资源</p><p>baseUrl: “/“</p><p>打包后的静态资源为什么要有hash</p><p>浏览器是有一个缓存机制 静态资源名字只要不改, 那么他就会直接用缓存的</p><p>刷新页面: 请求的名字是不是同一个 读取缓存 </p><p>所以我们要尽量去避免名字一致</p><p>hash算法: 将一串字符串经过运算得到一个新的乱码字符串 全世界独一无二(uuid才是独一无二的 )</p><p>利用好hash算法 可以让我们更好的去控制浏览器的缓存机制</p><p>base64图片 </p><h1 id="vite插件"><a href="#vite插件" class="headerlink" title="vite插件"></a>vite插件</h1><p>插件是什么？</p><blockquote><p>vite会在生命周期的不同阶段中去调用不同的插件以达到不同的目的</p></blockquote><ol><li><p>生命周期: 其实就和我们人一样, vite从开始执行到执行结束, 那么着整个过程就是vite的生命周期</p></li><li><p>webpack: 输出html文件的一个插件 清除输出目录: clean-webpack-plugin</p></li><li><p>中间件 , 插件</p></li><li><p>redux中间件是干嘛的: redux会在整个生命周期的不同阶段去调用不同的中间件以达到不同的目的</p></li></ol><h1 id="vite-aliases"><a href="#vite-aliases" class="headerlink" title="vite-aliases"></a>vite-aliases</h1><p>插件学习由简入繁</p><p>vite-aliases可以帮助我们自动生成别名: 检测你当前目录下包括src在内的所有文件夹, 并帮助我们去生成别名</p><p>{</p><p>  “@”: “/**/src”,</p><p>  “@aseets”: “/**/src/assets”,</p><p>  “@components”: “/**/src/components”,</p><p>}</p><p>nvm: node的一个版本管理工具</p><h1 id="手写vite-alias插件"><a href="#手写vite-alias插件" class="headerlink" title="手写vite-alias插件"></a>手写vite-alias插件</h1><p>整个插件就是在vite的生命周期的不同阶段去做不同的事情 </p><p>比方说vue和react会给你提供一些生命周期函数:</p><ul><li><p>created</p></li><li><p>mounted</p></li></ul><p>生命周期钩子</p><p>我们去手写Vite-aliases其实就是抢在vite执行配置文件之前去改写配置文件</p><p>通过vite.config.js 返回出去的配置对象以及我们在插件的config生命周期中返回的对象都不是最终的一个配置对象</p><p>vite会把这几个配置对象进行一个merge合并</p><p>{…defaultConfig, …specifyConfig}</p><h1 id="vite常用插件之vite-plugin-html"><a href="#vite常用插件之vite-plugin-html" class="headerlink" title="vite常用插件之vite-plugin-html"></a>vite常用插件之vite-plugin-html</h1><p>webpack –&gt; webpack-html-plugin / clean-webpack-plugin (clean: true)</p><p>其实就是因为vite他内置了非常多的插件, 然后我们作为普通的开发者不需要承担这么高的心智负担</p><p>vue react </p><p>vite也集成了vue团队一贯的作风 减少心智负担 css-loader less-loader ts-loader</p><p>vite将很多核心插件全部内置了</p><p>就是帮我们动态的去控制整个html文件中内容</p><p>ejs在服务端会用的比较频繁 因为服务端可能经常会动态的去修改index.html的内容</p><h1 id="vite常用插件之vite-plugin-mock"><a href="#vite常用插件之vite-plugin-mock" class="headerlink" title="vite常用插件之vite-plugin-mock"></a>vite常用插件之vite-plugin-mock</h1><p>mock数据: 模拟数据</p><p>前后端一般是并行开发 用户列表 ( 接口文档 )</p><p>mock数据 去做你前端的工作 </p><ol><li>简单方式: 直接去写死一两个数据 方便调试</li></ol><ul><li><p>缺陷： </p><ul><li>没法做海量数据测试</li><li>没法获得一些标准数据 </li><li>没法去感知http的异常</li></ul><p>axios: http请求库 </p></li></ul><ol start="2"><li>mockjs: 模拟海量数据的， vite-plugin-mock的依赖项就是mockjs</li></ol><p><a href="https://github.com/vbenjs/vite-plugin-mock">https://github.com/vbenjs/vite-plugin-mock</a></p><p># 手写vite-plugin-mock</p><p>- config </p><p>- configureSever</p><p>- transformIndexHtml</p>]]></content>
      
      
      <categories>
          
          <category> 构建工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组件库 </tag>
            
            <tag> Vite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>库鲁西第一篇测试博客</title>
      <link href="/post/7f89b6f6.html"/>
      <url>/post/7f89b6f6.html</url>
      
        <content type="html"><![CDATA[<p>难受，先跳过在github上部署了，按照一篇博文来的，出了同样的错误，博主说是网络错误，多试几次，哥们都试了n遍了！！！！而且明显觉得不是网络问题，哥们梯子很稳的！！！！！！！但是看不出来哪里有问题</p><blockquote><p>库鲁西！！！</p></blockquote><p>先往后走吧</p><p>嗯嗯问题是没有开管理员身份，一定记得开管理员身份，切记切记。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/4a17b156.html"/>
      <url>/post/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
  
</search>
